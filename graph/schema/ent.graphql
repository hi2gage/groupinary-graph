directive @goField(forceResolver: Boolean, name: String) on FIELD_DEFINITION | INPUT_FIELD_DEFINITION
directive @goModel(model: String, models: [String!]) on OBJECT | INPUT_OBJECT | SCALAR | ENUM | INTERFACE | UNION
"""
CreateDefinitionInput is used for create Definition object.
Input was generated by ent.
"""
input CreateDefinitionInput {
  createTime: Time
  updateTime: Time
  description: String!
  creatorID: ID
  wordID: ID
}
"""
CreateGroupInput is used for create Group object.
Input was generated by ent.
"""
input CreateGroupInput {
  createTime: Time
  updateTime: Time
  name: String!
  description: String
  wordIDs: [ID!]
  userIDs: [ID!]
}
"""
CreateWordInput is used for create Word object.
Input was generated by ent.
"""
input CreateWordInput {
  createTime: Time
  updateTime: Time
  description: String!
  creatorID: ID
  groupID: ID!
  definitionIDs: [ID!]
  parentIDs: [ID!]
  descendantIDs: [ID!]
}
"""
Define a Relay Cursor type:
https://relay.dev/graphql/connections.htm#sec-Cursor
"""
scalar Cursor
type Definition implements Node {
  id: ID!
  createTime: Time!
  updateTime: Time!
  description: String!
  creator: User
  word: Word
}
"""A connection to a list of items."""
type DefinitionConnection {
  """A list of edges."""
  edges: [DefinitionEdge]
  """Information to aid in pagination."""
  pageInfo: PageInfo!
  """Identifies the total count of items in the connection."""
  totalCount: Int!
}
"""An edge in a connection."""
type DefinitionEdge {
  """The item at the end of the edge."""
  node: Definition
  """A cursor for use in pagination."""
  cursor: Cursor!
}
"""Ordering options for Definition connections"""
input DefinitionOrder {
  """The ordering direction."""
  direction: OrderDirection! = ASC
  """The field by which to order Definitions."""
  field: DefinitionOrderField!
}
"""Properties by which Definition connections can be ordered."""
enum DefinitionOrderField {
  ALPHA
}
"""
DefinitionWhereInput is used for filtering Definition objects.
Input was generated by ent.
"""
input DefinitionWhereInput {
  not: DefinitionWhereInput
  and: [DefinitionWhereInput!]
  or: [DefinitionWhereInput!]
  """id field predicates"""
  id: ID
  idNEQ: ID
  idIn: [ID!]
  idNotIn: [ID!]
  idGT: ID
  idGTE: ID
  idLT: ID
  idLTE: ID
  """create_time field predicates"""
  createTime: Time
  createTimeNEQ: Time
  createTimeIn: [Time!]
  createTimeNotIn: [Time!]
  createTimeGT: Time
  createTimeGTE: Time
  createTimeLT: Time
  createTimeLTE: Time
  """update_time field predicates"""
  updateTime: Time
  updateTimeNEQ: Time
  updateTimeIn: [Time!]
  updateTimeNotIn: [Time!]
  updateTimeGT: Time
  updateTimeGTE: Time
  updateTimeLT: Time
  updateTimeLTE: Time
  """description field predicates"""
  description: String
  descriptionNEQ: String
  descriptionIn: [String!]
  descriptionNotIn: [String!]
  descriptionGT: String
  descriptionGTE: String
  descriptionLT: String
  descriptionLTE: String
  descriptionContains: String
  descriptionHasPrefix: String
  descriptionHasSuffix: String
  descriptionEqualFold: String
  descriptionContainsFold: String
  """creator edge predicates"""
  hasCreator: Boolean
  hasCreatorWith: [UserWhereInput!]
  """word edge predicates"""
  hasWord: Boolean
  hasWordWith: [WordWhereInput!]
}
type Group implements Node {
  id: ID!
  createTime: Time!
  updateTime: Time!
  name: String!
  description: String
  words(
    """Returns the elements in the list that come after the specified cursor."""
    after: Cursor

    """Returns the first _n_ elements from the list."""
    first: Int

    """Returns the elements in the list that come before the specified cursor."""
    before: Cursor

    """Returns the last _n_ elements from the list."""
    last: Int

    """Ordering options for Words returned from the connection."""
    orderBy: WordOrder

    """Filtering options for Words returned from the connection."""
    where: WordWhereInput
  ): WordConnection!
  users: [User!]
}
"""
GroupWhereInput is used for filtering Group objects.
Input was generated by ent.
"""
input GroupWhereInput {
  not: GroupWhereInput
  and: [GroupWhereInput!]
  or: [GroupWhereInput!]
  """id field predicates"""
  id: ID
  idNEQ: ID
  idIn: [ID!]
  idNotIn: [ID!]
  idGT: ID
  idGTE: ID
  idLT: ID
  idLTE: ID
  """create_time field predicates"""
  createTime: Time
  createTimeNEQ: Time
  createTimeIn: [Time!]
  createTimeNotIn: [Time!]
  createTimeGT: Time
  createTimeGTE: Time
  createTimeLT: Time
  createTimeLTE: Time
  """update_time field predicates"""
  updateTime: Time
  updateTimeNEQ: Time
  updateTimeIn: [Time!]
  updateTimeNotIn: [Time!]
  updateTimeGT: Time
  updateTimeGTE: Time
  updateTimeLT: Time
  updateTimeLTE: Time
  """name field predicates"""
  name: String
  nameNEQ: String
  nameIn: [String!]
  nameNotIn: [String!]
  nameGT: String
  nameGTE: String
  nameLT: String
  nameLTE: String
  nameContains: String
  nameHasPrefix: String
  nameHasSuffix: String
  nameEqualFold: String
  nameContainsFold: String
  """description field predicates"""
  description: String
  descriptionNEQ: String
  descriptionIn: [String!]
  descriptionNotIn: [String!]
  descriptionGT: String
  descriptionGTE: String
  descriptionLT: String
  descriptionLTE: String
  descriptionContains: String
  descriptionHasPrefix: String
  descriptionHasSuffix: String
  descriptionIsNil: Boolean
  descriptionNotNil: Boolean
  descriptionEqualFold: String
  descriptionContainsFold: String
  """words edge predicates"""
  hasWords: Boolean
  hasWordsWith: [WordWhereInput!]
  """users edge predicates"""
  hasUsers: Boolean
  hasUsersWith: [UserWhereInput!]
}
"""
An object with an ID.
Follows the [Relay Global Object Identification Specification](https://relay.dev/graphql/objectidentification.htm)
"""
interface Node @goModel(model: "groupinary/ent.Noder") {
  """The id of the object."""
  id: ID!
}
"""Possible directions in which to order a list of items when provided an `orderBy` argument."""
enum OrderDirection {
  """Specifies an ascending order for a given `orderBy` argument."""
  ASC
  """Specifies a descending order for a given `orderBy` argument."""
  DESC
}
"""
Information about pagination in a connection.
https://relay.dev/graphql/connections.htm#sec-undefined.PageInfo
"""
type PageInfo {
  """When paginating forwards, are there more items?"""
  hasNextPage: Boolean!
  """When paginating backwards, are there more items?"""
  hasPreviousPage: Boolean!
  """When paginating backwards, the cursor to continue."""
  startCursor: Cursor
  """When paginating forwards, the cursor to continue."""
  endCursor: Cursor
}
type Query {
  """Fetches an object given its ID."""
  node(
    """ID of the object."""
    id: ID!
  ): Node
  """Lookup nodes by a list of IDs."""
  nodes(
    """The list of node IDs."""
    ids: [ID!]!
  ): [Node]!
  definitions(
    """Returns the elements in the list that come after the specified cursor."""
    after: Cursor

    """Returns the first _n_ elements from the list."""
    first: Int

    """Returns the elements in the list that come before the specified cursor."""
    before: Cursor

    """Returns the last _n_ elements from the list."""
    last: Int

    """Ordering options for Definitions returned from the connection."""
    orderBy: DefinitionOrder

    """Filtering options for Definitions returned from the connection."""
    where: DefinitionWhereInput
  ): DefinitionConnection!
  groups: [Group!]!
  users: [User!]!
  words(
    """Returns the elements in the list that come after the specified cursor."""
    after: Cursor

    """Returns the first _n_ elements from the list."""
    first: Int

    """Returns the elements in the list that come before the specified cursor."""
    before: Cursor

    """Returns the last _n_ elements from the list."""
    last: Int

    """Ordering options for Words returned from the connection."""
    orderBy: WordOrder

    """Filtering options for Words returned from the connection."""
    where: WordWhereInput
  ): WordConnection!
}
"""The builtin Time type"""
scalar Time
"""
UpdateDefinitionInput is used for update Definition object.
Input was generated by ent.
"""
input UpdateDefinitionInput {
  updateTime: Time
  description: String
}
"""
UpdateGroupInput is used for update Group object.
Input was generated by ent.
"""
input UpdateGroupInput {
  updateTime: Time
  name: String
  description: String
  clearDescription: Boolean
  addWordIDs: [ID!]
  removeWordIDs: [ID!]
  clearWords: Boolean
  addUserIDs: [ID!]
  removeUserIDs: [ID!]
  clearUsers: Boolean
}
"""
UpdateUserInput is used for update User object.
Input was generated by ent.
"""
input UpdateUserInput {
  updateTime: Time
  firstname: String
  clearFirstName: Boolean
  lastname: String
  clearLastName: Boolean
  nickname: String
  clearNickName: Boolean
  addGroupIDs: [ID!]
  removeGroupIDs: [ID!]
  clearGroups: Boolean
}
"""
UpdateWordInput is used for update Word object.
Input was generated by ent.
"""
input UpdateWordInput {
  updateTime: Time
  description: String
  groupID: ID
  addParentIDs: [ID!]
  removeParentIDs: [ID!]
  clearParents: Boolean
}
type User implements Node {
  id: ID!
  createTime: Time!
  updateTime: Time!
  authid: String! @goField(name: "AuthID", forceResolver: false)
  firstname: String @goField(name: "FirstName", forceResolver: false)
  lastname: String @goField(name: "LastName", forceResolver: false)
  nickname: String @goField(name: "NickName", forceResolver: false)
  groups: [Group!]
  definitions(
    """Returns the elements in the list that come after the specified cursor."""
    after: Cursor

    """Returns the first _n_ elements from the list."""
    first: Int

    """Returns the elements in the list that come before the specified cursor."""
    before: Cursor

    """Returns the last _n_ elements from the list."""
    last: Int

    """Ordering options for Definitions returned from the connection."""
    orderBy: DefinitionOrder

    """Filtering options for Definitions returned from the connection."""
    where: DefinitionWhereInput
  ): DefinitionConnection!
  words(
    """Returns the elements in the list that come after the specified cursor."""
    after: Cursor

    """Returns the first _n_ elements from the list."""
    first: Int

    """Returns the elements in the list that come before the specified cursor."""
    before: Cursor

    """Returns the last _n_ elements from the list."""
    last: Int

    """Ordering options for Words returned from the connection."""
    orderBy: WordOrder

    """Filtering options for Words returned from the connection."""
    where: WordWhereInput
  ): WordConnection!
}
"""
UserWhereInput is used for filtering User objects.
Input was generated by ent.
"""
input UserWhereInput {
  not: UserWhereInput
  and: [UserWhereInput!]
  or: [UserWhereInput!]
  """id field predicates"""
  id: ID
  idNEQ: ID
  idIn: [ID!]
  idNotIn: [ID!]
  idGT: ID
  idGTE: ID
  idLT: ID
  idLTE: ID
  """create_time field predicates"""
  createTime: Time
  createTimeNEQ: Time
  createTimeIn: [Time!]
  createTimeNotIn: [Time!]
  createTimeGT: Time
  createTimeGTE: Time
  createTimeLT: Time
  createTimeLTE: Time
  """update_time field predicates"""
  updateTime: Time
  updateTimeNEQ: Time
  updateTimeIn: [Time!]
  updateTimeNotIn: [Time!]
  updateTimeGT: Time
  updateTimeGTE: Time
  updateTimeLT: Time
  updateTimeLTE: Time
  """authID field predicates"""
  authid: String
  authidNEQ: String
  authidIn: [String!]
  authidNotIn: [String!]
  authidGT: String
  authidGTE: String
  authidLT: String
  authidLTE: String
  authidContains: String
  authidHasPrefix: String
  authidHasSuffix: String
  authidEqualFold: String
  authidContainsFold: String
  """firstName field predicates"""
  firstname: String
  firstnameNEQ: String
  firstnameIn: [String!]
  firstnameNotIn: [String!]
  firstnameGT: String
  firstnameGTE: String
  firstnameLT: String
  firstnameLTE: String
  firstnameContains: String
  firstnameHasPrefix: String
  firstnameHasSuffix: String
  firstnameIsNil: Boolean
  firstnameNotNil: Boolean
  firstnameEqualFold: String
  firstnameContainsFold: String
  """lastName field predicates"""
  lastname: String
  lastnameNEQ: String
  lastnameIn: [String!]
  lastnameNotIn: [String!]
  lastnameGT: String
  lastnameGTE: String
  lastnameLT: String
  lastnameLTE: String
  lastnameContains: String
  lastnameHasPrefix: String
  lastnameHasSuffix: String
  lastnameIsNil: Boolean
  lastnameNotNil: Boolean
  lastnameEqualFold: String
  lastnameContainsFold: String
  """nickName field predicates"""
  nickname: String
  nicknameNEQ: String
  nicknameIn: [String!]
  nicknameNotIn: [String!]
  nicknameGT: String
  nicknameGTE: String
  nicknameLT: String
  nicknameLTE: String
  nicknameContains: String
  nicknameHasPrefix: String
  nicknameHasSuffix: String
  nicknameIsNil: Boolean
  nicknameNotNil: Boolean
  nicknameEqualFold: String
  nicknameContainsFold: String
  """groups edge predicates"""
  hasGroups: Boolean
  hasGroupsWith: [GroupWhereInput!]
  """definitions edge predicates"""
  hasDefinitions: Boolean
  hasDefinitionsWith: [DefinitionWhereInput!]
  """words edge predicates"""
  hasWords: Boolean
  hasWordsWith: [WordWhereInput!]
}
type Word implements Node {
  id: ID!
  createTime: Time!
  updateTime: Time!
  description: String!
  creator: User
  group: Group!
  definitions(
    """Returns the elements in the list that come after the specified cursor."""
    after: Cursor

    """Returns the first _n_ elements from the list."""
    first: Int

    """Returns the elements in the list that come before the specified cursor."""
    before: Cursor

    """Returns the last _n_ elements from the list."""
    last: Int

    """Ordering options for Definitions returned from the connection."""
    orderBy: DefinitionOrder

    """Filtering options for Definitions returned from the connection."""
    where: DefinitionWhereInput
  ): DefinitionConnection!
  parents: [Word!]
  descendants(
    """Returns the elements in the list that come after the specified cursor."""
    after: Cursor

    """Returns the first _n_ elements from the list."""
    first: Int

    """Returns the elements in the list that come before the specified cursor."""
    before: Cursor

    """Returns the last _n_ elements from the list."""
    last: Int

    """Ordering options for Words returned from the connection."""
    orderBy: WordOrder

    """Filtering options for Words returned from the connection."""
    where: WordWhereInput
  ): WordConnection!
}
"""A connection to a list of items."""
type WordConnection {
  """A list of edges."""
  edges: [WordEdge]
  """Information to aid in pagination."""
  pageInfo: PageInfo!
  """Identifies the total count of items in the connection."""
  totalCount: Int!
}
"""An edge in a connection."""
type WordEdge {
  """The item at the end of the edge."""
  node: Word
  """A cursor for use in pagination."""
  cursor: Cursor!
}
"""Ordering options for Word connections"""
input WordOrder {
  """The ordering direction."""
  direction: OrderDirection! = ASC
  """The field by which to order Words."""
  field: WordOrderField!
}
"""Properties by which Word connections can be ordered."""
enum WordOrderField {
  ALPHA
  DEFINITIONS_COUNT
  DESCENDANTS_COUNT
}
"""
WordWhereInput is used for filtering Word objects.
Input was generated by ent.
"""
input WordWhereInput {
  not: WordWhereInput
  and: [WordWhereInput!]
  or: [WordWhereInput!]
  """id field predicates"""
  id: ID
  idNEQ: ID
  idIn: [ID!]
  idNotIn: [ID!]
  idGT: ID
  idGTE: ID
  idLT: ID
  idLTE: ID
  """create_time field predicates"""
  createTime: Time
  createTimeNEQ: Time
  createTimeIn: [Time!]
  createTimeNotIn: [Time!]
  createTimeGT: Time
  createTimeGTE: Time
  createTimeLT: Time
  createTimeLTE: Time
  """update_time field predicates"""
  updateTime: Time
  updateTimeNEQ: Time
  updateTimeIn: [Time!]
  updateTimeNotIn: [Time!]
  updateTimeGT: Time
  updateTimeGTE: Time
  updateTimeLT: Time
  updateTimeLTE: Time
  """description field predicates"""
  description: String
  descriptionNEQ: String
  descriptionIn: [String!]
  descriptionNotIn: [String!]
  descriptionGT: String
  descriptionGTE: String
  descriptionLT: String
  descriptionLTE: String
  descriptionContains: String
  descriptionHasPrefix: String
  descriptionHasSuffix: String
  descriptionEqualFold: String
  descriptionContainsFold: String
  """creator edge predicates"""
  hasCreator: Boolean
  hasCreatorWith: [UserWhereInput!]
  """group edge predicates"""
  hasGroup: Boolean
  hasGroupWith: [GroupWhereInput!]
  """definitions edge predicates"""
  hasDefinitions: Boolean
  hasDefinitionsWith: [DefinitionWhereInput!]
  """parents edge predicates"""
  hasParents: Boolean
  hasParentsWith: [WordWhereInput!]
  """descendants edge predicates"""
  hasDescendants: Boolean
  hasDescendantsWith: [WordWhereInput!]
}
