package resolvers

// This file will be automatically regenerated based on the schema, any resolver implementations
// will be copied through when generating and any unknown code will be moved to the end.
// Code generated by github.com/99designs/gqlgen version v0.17.31

import (
	"context"
	"fmt"
	"shrektionary_api/ent"
	"shrektionary_api/graph"
)

// CreateGroup is the resolver for the createGroup field.
func (r *mutationResolver) CreateGroup(ctx context.Context, name string) (*ent.Group, error) {
	panic(fmt.Errorf("not implemented: CreateGroup - createGroup"))
}

// UpdateGroupName is the resolver for the updateGroupName field.
func (r *mutationResolver) UpdateGroupName(ctx context.Context, id int, name string) (*ent.Group, error) {
	panic(fmt.Errorf("not implemented: UpdateGroupName - updateGroupName"))
}

// DeleteGroup is the resolver for the deleteGroup field.
func (r *mutationResolver) DeleteGroup(ctx context.Context, id int) (bool, error) {
	panic(fmt.Errorf("not implemented: DeleteGroup - deleteGroup"))
}

// DeleteWord is the resolver for the deleteWord field.
func (r *mutationResolver) DeleteWord(ctx context.Context, id int) (bool, error) {
	panic(fmt.Errorf("not implemented: DeleteWord - deleteWord"))
}

// DeleteDefinition is the resolver for the deleteDefinition field.
func (r *mutationResolver) DeleteDefinition(ctx context.Context, id int) (bool, error) {
	panic(fmt.Errorf("not implemented: DeleteDefinition - deleteDefinition"))
}

// UpdateUserName is the resolver for the updateUserName field.
func (r *mutationResolver) UpdateUserName(ctx context.Context, firstName string, lastName *string) (*ent.User, error) {
	panic(fmt.Errorf("not implemented: UpdateUserName - updateUserName"))
}

// AddParentWord is the resolver for the addParentWord field.
func (r *mutationResolver) AddParentWord(ctx context.Context, parentWord string, parentDefinition *string) (*ent.Word, error) {
	panic(fmt.Errorf("not implemented: AddParentWord - addParentWord"))
}

// AddChildWord is the resolver for the addChildWord field.
func (r *mutationResolver) AddChildWord(ctx context.Context, parentIds []int, childWord string, childDefinition *string) (*ent.Word, error) {
	panic(fmt.Errorf("not implemented: AddChildWord - addChildWord"))
}

// AddDefinition is the resolver for the addDefinition field.
func (r *mutationResolver) AddDefinition(ctx context.Context, wordID int, definition string) (*ent.Definition, error) {
	panic(fmt.Errorf("not implemented: AddDefinition - addDefinition"))
}

// ConnectWords is the resolver for the connectWords field.
func (r *mutationResolver) ConnectWords(ctx context.Context, parentID int, childID int) (*ent.Word, error) {
	panic(fmt.Errorf("not implemented: ConnectWords - connectWords"))
}

// UpdateWord is the resolver for the updateWord field.
func (r *mutationResolver) UpdateWord(ctx context.Context, id int, wordDescription string) (*ent.Word, error) {
	panic(fmt.Errorf("not implemented: UpdateWord - updateWord"))
}

// UpdateDefinition is the resolver for the updateDefinition field.
func (r *mutationResolver) UpdateDefinition(ctx context.Context, id int, definitionDescription string) (*ent.Definition, error) {
	panic(fmt.Errorf("not implemented: UpdateDefinition - updateDefinition"))
}

// Mutation returns graph.MutationResolver implementation.
func (r *Resolver) Mutation() graph.MutationResolver { return &mutationResolver{r} }

type mutationResolver struct{ *Resolver }
