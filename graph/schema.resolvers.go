package graph

// This file will be automatically regenerated based on the schema, any resolver implementations
// will be copied through when generating and any unknown code will be moved to the end.
// Code generated by github.com/99designs/gqlgen version v0.17.31

import (
	"context"
	"graphql-api/graph/model"
)

// CreateTodo is the resolver for the createTodo field.
func (r *mutationResolver) CreateTodo(ctx context.Context, input model.NewTodo) (*model.Todo, error) {
	// Implement the logic to create a new todo item
	// Retrieve the values from the `input` argument and create a new todo item
	// You can interact with your database or any other data storage mechanism here

	// Example implementation
	todo := &model.Todo{
		ID:   "2",        // Assign a unique ID to the new todo item
		Text: input.Text, // Retrieve the text from the input argument
		Done: false,      // Set the initial done status
		User: &model.User{
			ID:   input.UserID, // Retrieve the user ID from the input argument
			Name: "John Doe",   // Set the user's name
		},
	}

	// Return the created todo item
	return todo, nil
}

// Todos is the resolver for the todos field.
func (r *queryResolver) Todos(ctx context.Context) ([]*model.Todo, error) {
	// Implement the logic to retrieve all todo items
	// You can interact with your database or any other data storage mechanism here

	// Example implementation
	todos := []*model.Todo{
		{
			ID:   "100",
			Text: "Todo 1",
			Done: false,
			User: &model.User{
				ID:   "4",
				Name: "John Doe",
			},
		},
		{
			ID:   "2",
			Text: "Todo 2",
			Done: true,
			User: &model.User{
				ID:   "2",
				Name: "Jane Smith",
			},
		},
		{
			ID:   "3",
			Text: "Todo 3",
			Done: true,
			User: &model.User{
				ID:   "3",
				Name: "Jane Smith",
			},
		},
		// Add more todo items as needed
	}

	// Return the list of todo items
	return todos, nil
}

// Mutation returns MutationResolver implementation.
func (r *Resolver) Mutation() MutationResolver { return &mutationResolver{r} }

// Query returns QueryResolver implementation.
func (r *Resolver) Query() QueryResolver { return &queryResolver{r} }

type mutationResolver struct{ *Resolver }
type queryResolver struct{ *Resolver }
