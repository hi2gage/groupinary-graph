// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"shrektionary_api/ent/definition"
	"shrektionary_api/ent/predicate"
	"shrektionary_api/ent/word"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// WordUpdate is the builder for updating Word entities.
type WordUpdate struct {
	config
	hooks    []Hook
	mutation *WordMutation
}

// Where appends a list predicates to the WordUpdate builder.
func (wu *WordUpdate) Where(ps ...predicate.Word) *WordUpdate {
	wu.mutation.Where(ps...)
	return wu
}

// SetDescription sets the "description" field.
func (wu *WordUpdate) SetDescription(s string) *WordUpdate {
	wu.mutation.SetDescription(s)
	return wu
}

// AddDefinitionIDs adds the "definitions" edge to the Definition entity by IDs.
func (wu *WordUpdate) AddDefinitionIDs(ids ...int) *WordUpdate {
	wu.mutation.AddDefinitionIDs(ids...)
	return wu
}

// AddDefinitions adds the "definitions" edges to the Definition entity.
func (wu *WordUpdate) AddDefinitions(d ...*Definition) *WordUpdate {
	ids := make([]int, len(d))
	for i := range d {
		ids[i] = d[i].ID
	}
	return wu.AddDefinitionIDs(ids...)
}

// Mutation returns the WordMutation object of the builder.
func (wu *WordUpdate) Mutation() *WordMutation {
	return wu.mutation
}

// ClearDefinitions clears all "definitions" edges to the Definition entity.
func (wu *WordUpdate) ClearDefinitions() *WordUpdate {
	wu.mutation.ClearDefinitions()
	return wu
}

// RemoveDefinitionIDs removes the "definitions" edge to Definition entities by IDs.
func (wu *WordUpdate) RemoveDefinitionIDs(ids ...int) *WordUpdate {
	wu.mutation.RemoveDefinitionIDs(ids...)
	return wu
}

// RemoveDefinitions removes "definitions" edges to Definition entities.
func (wu *WordUpdate) RemoveDefinitions(d ...*Definition) *WordUpdate {
	ids := make([]int, len(d))
	for i := range d {
		ids[i] = d[i].ID
	}
	return wu.RemoveDefinitionIDs(ids...)
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (wu *WordUpdate) Save(ctx context.Context) (int, error) {
	return withHooks(ctx, wu.sqlSave, wu.mutation, wu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (wu *WordUpdate) SaveX(ctx context.Context) int {
	affected, err := wu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (wu *WordUpdate) Exec(ctx context.Context) error {
	_, err := wu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (wu *WordUpdate) ExecX(ctx context.Context) {
	if err := wu.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (wu *WordUpdate) check() error {
	if v, ok := wu.mutation.Description(); ok {
		if err := word.DescriptionValidator(v); err != nil {
			return &ValidationError{Name: "description", err: fmt.Errorf(`ent: validator failed for field "Word.description": %w`, err)}
		}
	}
	return nil
}

func (wu *WordUpdate) sqlSave(ctx context.Context) (n int, err error) {
	if err := wu.check(); err != nil {
		return n, err
	}
	_spec := sqlgraph.NewUpdateSpec(word.Table, word.Columns, sqlgraph.NewFieldSpec(word.FieldID, field.TypeInt))
	if ps := wu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := wu.mutation.Description(); ok {
		_spec.SetField(word.FieldDescription, field.TypeString, value)
	}
	if wu.mutation.DefinitionsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   word.DefinitionsTable,
			Columns: []string{word.DefinitionsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(definition.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := wu.mutation.RemovedDefinitionsIDs(); len(nodes) > 0 && !wu.mutation.DefinitionsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   word.DefinitionsTable,
			Columns: []string{word.DefinitionsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(definition.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := wu.mutation.DefinitionsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   word.DefinitionsTable,
			Columns: []string{word.DefinitionsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(definition.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, wu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{word.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	wu.mutation.done = true
	return n, nil
}

// WordUpdateOne is the builder for updating a single Word entity.
type WordUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *WordMutation
}

// SetDescription sets the "description" field.
func (wuo *WordUpdateOne) SetDescription(s string) *WordUpdateOne {
	wuo.mutation.SetDescription(s)
	return wuo
}

// AddDefinitionIDs adds the "definitions" edge to the Definition entity by IDs.
func (wuo *WordUpdateOne) AddDefinitionIDs(ids ...int) *WordUpdateOne {
	wuo.mutation.AddDefinitionIDs(ids...)
	return wuo
}

// AddDefinitions adds the "definitions" edges to the Definition entity.
func (wuo *WordUpdateOne) AddDefinitions(d ...*Definition) *WordUpdateOne {
	ids := make([]int, len(d))
	for i := range d {
		ids[i] = d[i].ID
	}
	return wuo.AddDefinitionIDs(ids...)
}

// Mutation returns the WordMutation object of the builder.
func (wuo *WordUpdateOne) Mutation() *WordMutation {
	return wuo.mutation
}

// ClearDefinitions clears all "definitions" edges to the Definition entity.
func (wuo *WordUpdateOne) ClearDefinitions() *WordUpdateOne {
	wuo.mutation.ClearDefinitions()
	return wuo
}

// RemoveDefinitionIDs removes the "definitions" edge to Definition entities by IDs.
func (wuo *WordUpdateOne) RemoveDefinitionIDs(ids ...int) *WordUpdateOne {
	wuo.mutation.RemoveDefinitionIDs(ids...)
	return wuo
}

// RemoveDefinitions removes "definitions" edges to Definition entities.
func (wuo *WordUpdateOne) RemoveDefinitions(d ...*Definition) *WordUpdateOne {
	ids := make([]int, len(d))
	for i := range d {
		ids[i] = d[i].ID
	}
	return wuo.RemoveDefinitionIDs(ids...)
}

// Where appends a list predicates to the WordUpdate builder.
func (wuo *WordUpdateOne) Where(ps ...predicate.Word) *WordUpdateOne {
	wuo.mutation.Where(ps...)
	return wuo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (wuo *WordUpdateOne) Select(field string, fields ...string) *WordUpdateOne {
	wuo.fields = append([]string{field}, fields...)
	return wuo
}

// Save executes the query and returns the updated Word entity.
func (wuo *WordUpdateOne) Save(ctx context.Context) (*Word, error) {
	return withHooks(ctx, wuo.sqlSave, wuo.mutation, wuo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (wuo *WordUpdateOne) SaveX(ctx context.Context) *Word {
	node, err := wuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (wuo *WordUpdateOne) Exec(ctx context.Context) error {
	_, err := wuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (wuo *WordUpdateOne) ExecX(ctx context.Context) {
	if err := wuo.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (wuo *WordUpdateOne) check() error {
	if v, ok := wuo.mutation.Description(); ok {
		if err := word.DescriptionValidator(v); err != nil {
			return &ValidationError{Name: "description", err: fmt.Errorf(`ent: validator failed for field "Word.description": %w`, err)}
		}
	}
	return nil
}

func (wuo *WordUpdateOne) sqlSave(ctx context.Context) (_node *Word, err error) {
	if err := wuo.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(word.Table, word.Columns, sqlgraph.NewFieldSpec(word.FieldID, field.TypeInt))
	id, ok := wuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "Word.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := wuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, word.FieldID)
		for _, f := range fields {
			if !word.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != word.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := wuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := wuo.mutation.Description(); ok {
		_spec.SetField(word.FieldDescription, field.TypeString, value)
	}
	if wuo.mutation.DefinitionsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   word.DefinitionsTable,
			Columns: []string{word.DefinitionsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(definition.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := wuo.mutation.RemovedDefinitionsIDs(); len(nodes) > 0 && !wuo.mutation.DefinitionsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   word.DefinitionsTable,
			Columns: []string{word.DefinitionsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(definition.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := wuo.mutation.DefinitionsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   word.DefinitionsTable,
			Columns: []string{word.DefinitionsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(definition.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &Word{config: wuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, wuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{word.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	wuo.mutation.done = true
	return _node, nil
}
