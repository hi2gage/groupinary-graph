// Code generated by ent, DO NOT EDIT.

package ent

// CreateDefinitionInput represents a mutation input for creating definitions.
type CreateDefinitionInput struct {
	Description string
	WordID      *int
}

// Mutate applies the CreateDefinitionInput on the DefinitionMutation builder.
func (i *CreateDefinitionInput) Mutate(m *DefinitionMutation) {
	m.SetDescription(i.Description)
	if v := i.WordID; v != nil {
		m.SetWordID(*v)
	}
}

// SetInput applies the change-set in the CreateDefinitionInput on the DefinitionCreate builder.
func (c *DefinitionCreate) SetInput(i CreateDefinitionInput) *DefinitionCreate {
	i.Mutate(c.Mutation())
	return c
}

// UpdateDefinitionInput represents a mutation input for updating definitions.
type UpdateDefinitionInput struct {
	Description *string
	ClearWord   bool
	WordID      *int
}

// Mutate applies the UpdateDefinitionInput on the DefinitionMutation builder.
func (i *UpdateDefinitionInput) Mutate(m *DefinitionMutation) {
	if v := i.Description; v != nil {
		m.SetDescription(*v)
	}
	if i.ClearWord {
		m.ClearWord()
	}
	if v := i.WordID; v != nil {
		m.SetWordID(*v)
	}
}

// SetInput applies the change-set in the UpdateDefinitionInput on the DefinitionUpdate builder.
func (c *DefinitionUpdate) SetInput(i UpdateDefinitionInput) *DefinitionUpdate {
	i.Mutate(c.Mutation())
	return c
}

// SetInput applies the change-set in the UpdateDefinitionInput on the DefinitionUpdateOne builder.
func (c *DefinitionUpdateOne) SetInput(i UpdateDefinitionInput) *DefinitionUpdateOne {
	i.Mutate(c.Mutation())
	return c
}

// CreateGroupInput represents a mutation input for creating groups.
type CreateGroupInput struct {
	Description string
	WordIDs     []int
	UserIDs     []int
}

// Mutate applies the CreateGroupInput on the GroupMutation builder.
func (i *CreateGroupInput) Mutate(m *GroupMutation) {
	m.SetDescription(i.Description)
	if v := i.WordIDs; len(v) > 0 {
		m.AddWordIDs(v...)
	}
	if v := i.UserIDs; len(v) > 0 {
		m.AddUserIDs(v...)
	}
}

// SetInput applies the change-set in the CreateGroupInput on the GroupCreate builder.
func (c *GroupCreate) SetInput(i CreateGroupInput) *GroupCreate {
	i.Mutate(c.Mutation())
	return c
}

// CreateUserInput represents a mutation input for creating users.
type CreateUserInput struct {
	AuthID        string
	GroupIDs      []int
	DefinitionIDs []int
	WordIDs       []int
}

// Mutate applies the CreateUserInput on the UserMutation builder.
func (i *CreateUserInput) Mutate(m *UserMutation) {
	m.SetAuthID(i.AuthID)
	if v := i.GroupIDs; len(v) > 0 {
		m.AddGroupIDs(v...)
	}
	if v := i.DefinitionIDs; len(v) > 0 {
		m.AddDefinitionIDs(v...)
	}
	if v := i.WordIDs; len(v) > 0 {
		m.AddWordIDs(v...)
	}
}

// SetInput applies the change-set in the CreateUserInput on the UserCreate builder.
func (c *UserCreate) SetInput(i CreateUserInput) *UserCreate {
	i.Mutate(c.Mutation())
	return c
}

// CreateWordInput represents a mutation input for creating words.
type CreateWordInput struct {
	Description   string
	Root          bool
	CreatorID     *int
	DefinitionIDs []int
	DescendantIDs []int
	ParentID      *int
}

// Mutate applies the CreateWordInput on the WordMutation builder.
func (i *CreateWordInput) Mutate(m *WordMutation) {
	m.SetDescription(i.Description)
	m.SetRoot(i.Root)
	if v := i.CreatorID; v != nil {
		m.SetCreatorID(*v)
	}
	if v := i.DefinitionIDs; len(v) > 0 {
		m.AddDefinitionIDs(v...)
	}
	if v := i.DescendantIDs; len(v) > 0 {
		m.AddDescendantIDs(v...)
	}
	if v := i.ParentID; v != nil {
		m.SetParentID(*v)
	}
}

// SetInput applies the change-set in the CreateWordInput on the WordCreate builder.
func (c *WordCreate) SetInput(i CreateWordInput) *WordCreate {
	i.Mutate(c.Mutation())
	return c
}
