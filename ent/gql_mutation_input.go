// Code generated by ent, DO NOT EDIT.

package ent

import (
	"time"
)

// CreateDefinitionInput represents a mutation input for creating definitions.
type CreateDefinitionInput struct {
	Description string
	CreatorID   *int
}

// Mutate applies the CreateDefinitionInput on the DefinitionMutation builder.
func (i *CreateDefinitionInput) Mutate(m *DefinitionMutation) {
	m.SetDescription(i.Description)
	if v := i.CreatorID; v != nil {
		m.SetCreatorID(*v)
	}
}

// SetInput applies the change-set in the CreateDefinitionInput on the DefinitionCreate builder.
func (c *DefinitionCreate) SetInput(i CreateDefinitionInput) *DefinitionCreate {
	i.Mutate(c.Mutation())
	return c
}

// UpdateDefinitionInput represents a mutation input for updating definitions.
type UpdateDefinitionInput struct {
	Description *string
}

// Mutate applies the UpdateDefinitionInput on the DefinitionMutation builder.
func (i *UpdateDefinitionInput) Mutate(m *DefinitionMutation) {
	if v := i.Description; v != nil {
		m.SetDescription(*v)
	}
}

// SetInput applies the change-set in the UpdateDefinitionInput on the DefinitionUpdate builder.
func (c *DefinitionUpdate) SetInput(i UpdateDefinitionInput) *DefinitionUpdate {
	i.Mutate(c.Mutation())
	return c
}

// SetInput applies the change-set in the UpdateDefinitionInput on the DefinitionUpdateOne builder.
func (c *DefinitionUpdateOne) SetInput(i UpdateDefinitionInput) *DefinitionUpdateOne {
	i.Mutate(c.Mutation())
	return c
}

// CreateGroupInput represents a mutation input for creating groups.
type CreateGroupInput struct {
	Description string
	RootWordIDs []int
	UserIDs     []int
}

// Mutate applies the CreateGroupInput on the GroupMutation builder.
func (i *CreateGroupInput) Mutate(m *GroupMutation) {
	m.SetDescription(i.Description)
	if v := i.RootWordIDs; len(v) > 0 {
		m.AddRootWordIDs(v...)
	}
	if v := i.UserIDs; len(v) > 0 {
		m.AddUserIDs(v...)
	}
}

// SetInput applies the change-set in the CreateGroupInput on the GroupCreate builder.
func (c *GroupCreate) SetInput(i CreateGroupInput) *GroupCreate {
	i.Mutate(c.Mutation())
	return c
}

// UpdateUserInput represents a mutation input for updating users.
type UpdateUserInput struct {
	UpdateTime     *time.Time
	ClearFirstName bool
	FirstName      *string
	ClearLastName  bool
	LastName       *string
	ClearGroups    bool
	AddGroupIDs    []int
	RemoveGroupIDs []int
}

// Mutate applies the UpdateUserInput on the UserMutation builder.
func (i *UpdateUserInput) Mutate(m *UserMutation) {
	if v := i.UpdateTime; v != nil {
		m.SetUpdateTime(*v)
	}
	if i.ClearFirstName {
		m.ClearFirstName()
	}
	if v := i.FirstName; v != nil {
		m.SetFirstName(*v)
	}
	if i.ClearLastName {
		m.ClearLastName()
	}
	if v := i.LastName; v != nil {
		m.SetLastName(*v)
	}
	if i.ClearGroups {
		m.ClearGroups()
	}
	if v := i.AddGroupIDs; len(v) > 0 {
		m.AddGroupIDs(v...)
	}
	if v := i.RemoveGroupIDs; len(v) > 0 {
		m.RemoveGroupIDs(v...)
	}
}

// SetInput applies the change-set in the UpdateUserInput on the UserUpdate builder.
func (c *UserUpdate) SetInput(i UpdateUserInput) *UserUpdate {
	i.Mutate(c.Mutation())
	return c
}

// SetInput applies the change-set in the UpdateUserInput on the UserUpdateOne builder.
func (c *UserUpdateOne) SetInput(i UpdateUserInput) *UserUpdateOne {
	i.Mutate(c.Mutation())
	return c
}

// CreateWordInput represents a mutation input for creating words.
type CreateWordInput struct {
	Description     string
	DescendantCount *int
	CreatorID       *int
	GroupID         *int
	DefinitionIDs   []int
	DescendantIDs   []int
	ParentIDs       []int
}

// Mutate applies the CreateWordInput on the WordMutation builder.
func (i *CreateWordInput) Mutate(m *WordMutation) {
	m.SetDescription(i.Description)
	if v := i.DescendantCount; v != nil {
		m.SetDescendantCount(*v)
	}
	if v := i.CreatorID; v != nil {
		m.SetCreatorID(*v)
	}
	if v := i.GroupID; v != nil {
		m.SetGroupID(*v)
	}
	if v := i.DefinitionIDs; len(v) > 0 {
		m.AddDefinitionIDs(v...)
	}
	if v := i.DescendantIDs; len(v) > 0 {
		m.AddDescendantIDs(v...)
	}
	if v := i.ParentIDs; len(v) > 0 {
		m.AddParentIDs(v...)
	}
}

// SetInput applies the change-set in the CreateWordInput on the WordCreate builder.
func (c *WordCreate) SetInput(i CreateWordInput) *WordCreate {
	i.Mutate(c.Mutation())
	return c
}

// UpdateWordInput represents a mutation input for updating words.
type UpdateWordInput struct {
	Description     *string
	ClearGroup      bool
	GroupID         *int
	ClearParents    bool
	AddParentIDs    []int
	RemoveParentIDs []int
}

// Mutate applies the UpdateWordInput on the WordMutation builder.
func (i *UpdateWordInput) Mutate(m *WordMutation) {
	if v := i.Description; v != nil {
		m.SetDescription(*v)
	}
	if i.ClearGroup {
		m.ClearGroup()
	}
	if v := i.GroupID; v != nil {
		m.SetGroupID(*v)
	}
	if i.ClearParents {
		m.ClearParents()
	}
	if v := i.AddParentIDs; len(v) > 0 {
		m.AddParentIDs(v...)
	}
	if v := i.RemoveParentIDs; len(v) > 0 {
		m.RemoveParentIDs(v...)
	}
}

// SetInput applies the change-set in the UpdateWordInput on the WordUpdate builder.
func (c *WordUpdate) SetInput(i UpdateWordInput) *WordUpdate {
	i.Mutate(c.Mutation())
	return c
}

// SetInput applies the change-set in the UpdateWordInput on the WordUpdateOne builder.
func (c *WordUpdateOne) SetInput(i UpdateWordInput) *WordUpdateOne {
	i.Mutate(c.Mutation())
	return c
}
