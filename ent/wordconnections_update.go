// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"shrektionary_api/ent/predicate"
	"shrektionary_api/ent/wordconnections"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// WordConnectionsUpdate is the builder for updating WordConnections entities.
type WordConnectionsUpdate struct {
	config
	hooks    []Hook
	mutation *WordConnectionsMutation
}

// Where appends a list predicates to the WordConnectionsUpdate builder.
func (wcu *WordConnectionsUpdate) Where(ps ...predicate.WordConnections) *WordConnectionsUpdate {
	wcu.mutation.Where(ps...)
	return wcu
}

// SetDescription sets the "description" field.
func (wcu *WordConnectionsUpdate) SetDescription(s string) *WordConnectionsUpdate {
	wcu.mutation.SetDescription(s)
	return wcu
}

// Mutation returns the WordConnectionsMutation object of the builder.
func (wcu *WordConnectionsUpdate) Mutation() *WordConnectionsMutation {
	return wcu.mutation
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (wcu *WordConnectionsUpdate) Save(ctx context.Context) (int, error) {
	return withHooks(ctx, wcu.sqlSave, wcu.mutation, wcu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (wcu *WordConnectionsUpdate) SaveX(ctx context.Context) int {
	affected, err := wcu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (wcu *WordConnectionsUpdate) Exec(ctx context.Context) error {
	_, err := wcu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (wcu *WordConnectionsUpdate) ExecX(ctx context.Context) {
	if err := wcu.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (wcu *WordConnectionsUpdate) check() error {
	if v, ok := wcu.mutation.Description(); ok {
		if err := wordconnections.DescriptionValidator(v); err != nil {
			return &ValidationError{Name: "description", err: fmt.Errorf(`ent: validator failed for field "WordConnections.description": %w`, err)}
		}
	}
	return nil
}

func (wcu *WordConnectionsUpdate) sqlSave(ctx context.Context) (n int, err error) {
	if err := wcu.check(); err != nil {
		return n, err
	}
	_spec := sqlgraph.NewUpdateSpec(wordconnections.Table, wordconnections.Columns, sqlgraph.NewFieldSpec(wordconnections.FieldID, field.TypeInt))
	if ps := wcu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := wcu.mutation.Description(); ok {
		_spec.SetField(wordconnections.FieldDescription, field.TypeString, value)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, wcu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{wordconnections.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	wcu.mutation.done = true
	return n, nil
}

// WordConnectionsUpdateOne is the builder for updating a single WordConnections entity.
type WordConnectionsUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *WordConnectionsMutation
}

// SetDescription sets the "description" field.
func (wcuo *WordConnectionsUpdateOne) SetDescription(s string) *WordConnectionsUpdateOne {
	wcuo.mutation.SetDescription(s)
	return wcuo
}

// Mutation returns the WordConnectionsMutation object of the builder.
func (wcuo *WordConnectionsUpdateOne) Mutation() *WordConnectionsMutation {
	return wcuo.mutation
}

// Where appends a list predicates to the WordConnectionsUpdate builder.
func (wcuo *WordConnectionsUpdateOne) Where(ps ...predicate.WordConnections) *WordConnectionsUpdateOne {
	wcuo.mutation.Where(ps...)
	return wcuo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (wcuo *WordConnectionsUpdateOne) Select(field string, fields ...string) *WordConnectionsUpdateOne {
	wcuo.fields = append([]string{field}, fields...)
	return wcuo
}

// Save executes the query and returns the updated WordConnections entity.
func (wcuo *WordConnectionsUpdateOne) Save(ctx context.Context) (*WordConnections, error) {
	return withHooks(ctx, wcuo.sqlSave, wcuo.mutation, wcuo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (wcuo *WordConnectionsUpdateOne) SaveX(ctx context.Context) *WordConnections {
	node, err := wcuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (wcuo *WordConnectionsUpdateOne) Exec(ctx context.Context) error {
	_, err := wcuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (wcuo *WordConnectionsUpdateOne) ExecX(ctx context.Context) {
	if err := wcuo.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (wcuo *WordConnectionsUpdateOne) check() error {
	if v, ok := wcuo.mutation.Description(); ok {
		if err := wordconnections.DescriptionValidator(v); err != nil {
			return &ValidationError{Name: "description", err: fmt.Errorf(`ent: validator failed for field "WordConnections.description": %w`, err)}
		}
	}
	return nil
}

func (wcuo *WordConnectionsUpdateOne) sqlSave(ctx context.Context) (_node *WordConnections, err error) {
	if err := wcuo.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(wordconnections.Table, wordconnections.Columns, sqlgraph.NewFieldSpec(wordconnections.FieldID, field.TypeInt))
	id, ok := wcuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "WordConnections.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := wcuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, wordconnections.FieldID)
		for _, f := range fields {
			if !wordconnections.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != wordconnections.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := wcuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := wcuo.mutation.Description(); ok {
		_spec.SetField(wordconnections.FieldDescription, field.TypeString, value)
	}
	_node = &WordConnections{config: wcuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, wcuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{wordconnections.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	wcuo.mutation.done = true
	return _node, nil
}
