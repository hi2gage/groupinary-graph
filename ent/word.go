// Code generated by ent, DO NOT EDIT.

package ent

import (
	"fmt"
	"shrektionary_api/ent/word"
	"strings"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
)

// Word is the model entity for the Word schema.
type Word struct {
	config `json:"-"`
	// ID of the ent.
	ID int `json:"id,omitempty"`
	// Description holds the value of the "description" field.
	Description string `json:"description,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the WordQuery when eager-loading is set.
	Edges        WordEdges `json:"edges"`
	selectValues sql.SelectValues
}

// WordEdges holds the relations/edges for other nodes in the graph.
type WordEdges struct {
	// Definitions holds the value of the definitions edge.
	Definitions []*Definition `json:"definitions,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [1]bool
	// totalCount holds the count of the edges above.
	totalCount [1]map[string]int

	namedDefinitions map[string][]*Definition
}

// DefinitionsOrErr returns the Definitions value or an error if the edge
// was not loaded in eager-loading.
func (e WordEdges) DefinitionsOrErr() ([]*Definition, error) {
	if e.loadedTypes[0] {
		return e.Definitions, nil
	}
	return nil, &NotLoadedError{edge: "definitions"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*Word) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case word.FieldID:
			values[i] = new(sql.NullInt64)
		case word.FieldDescription:
			values[i] = new(sql.NullString)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the Word fields.
func (w *Word) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case word.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			w.ID = int(value.Int64)
		case word.FieldDescription:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field description", values[i])
			} else if value.Valid {
				w.Description = value.String
			}
		default:
			w.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the Word.
// This includes values selected through modifiers, order, etc.
func (w *Word) Value(name string) (ent.Value, error) {
	return w.selectValues.Get(name)
}

// QueryDefinitions queries the "definitions" edge of the Word entity.
func (w *Word) QueryDefinitions() *DefinitionQuery {
	return NewWordClient(w.config).QueryDefinitions(w)
}

// Update returns a builder for updating this Word.
// Note that you need to call Word.Unwrap() before calling this method if this Word
// was returned from a transaction, and the transaction was committed or rolled back.
func (w *Word) Update() *WordUpdateOne {
	return NewWordClient(w.config).UpdateOne(w)
}

// Unwrap unwraps the Word entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (w *Word) Unwrap() *Word {
	_tx, ok := w.config.driver.(*txDriver)
	if !ok {
		panic("ent: Word is not a transactional entity")
	}
	w.config.driver = _tx.drv
	return w
}

// String implements the fmt.Stringer.
func (w *Word) String() string {
	var builder strings.Builder
	builder.WriteString("Word(")
	builder.WriteString(fmt.Sprintf("id=%v, ", w.ID))
	builder.WriteString("description=")
	builder.WriteString(w.Description)
	builder.WriteByte(')')
	return builder.String()
}

// NamedDefinitions returns the Definitions named value or an error if the edge was not
// loaded in eager-loading with this name.
func (w *Word) NamedDefinitions(name string) ([]*Definition, error) {
	if w.Edges.namedDefinitions == nil {
		return nil, &NotLoadedError{edge: name}
	}
	nodes, ok := w.Edges.namedDefinitions[name]
	if !ok {
		return nil, &NotLoadedError{edge: name}
	}
	return nodes, nil
}

func (w *Word) appendNamedDefinitions(name string, edges ...*Definition) {
	if w.Edges.namedDefinitions == nil {
		w.Edges.namedDefinitions = make(map[string][]*Definition)
	}
	if len(edges) == 0 {
		w.Edges.namedDefinitions[name] = []*Definition{}
	} else {
		w.Edges.namedDefinitions[name] = append(w.Edges.namedDefinitions[name], edges...)
	}
}

// Words is a parsable slice of Word.
type Words []*Word
