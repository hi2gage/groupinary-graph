// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"groupinary/ent/definition"
	"groupinary/ent/user"
	"groupinary/ent/word"
	"time"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// DefinitionCreate is the builder for creating a Definition entity.
type DefinitionCreate struct {
	config
	mutation *DefinitionMutation
	hooks    []Hook
}

// SetCreateTime sets the "create_time" field.
func (dc *DefinitionCreate) SetCreateTime(t time.Time) *DefinitionCreate {
	dc.mutation.SetCreateTime(t)
	return dc
}

// SetNillableCreateTime sets the "create_time" field if the given value is not nil.
func (dc *DefinitionCreate) SetNillableCreateTime(t *time.Time) *DefinitionCreate {
	if t != nil {
		dc.SetCreateTime(*t)
	}
	return dc
}

// SetUpdateTime sets the "update_time" field.
func (dc *DefinitionCreate) SetUpdateTime(t time.Time) *DefinitionCreate {
	dc.mutation.SetUpdateTime(t)
	return dc
}

// SetNillableUpdateTime sets the "update_time" field if the given value is not nil.
func (dc *DefinitionCreate) SetNillableUpdateTime(t *time.Time) *DefinitionCreate {
	if t != nil {
		dc.SetUpdateTime(*t)
	}
	return dc
}

// SetDescription sets the "description" field.
func (dc *DefinitionCreate) SetDescription(s string) *DefinitionCreate {
	dc.mutation.SetDescription(s)
	return dc
}

// SetCreatorID sets the "creator" edge to the User entity by ID.
func (dc *DefinitionCreate) SetCreatorID(id int) *DefinitionCreate {
	dc.mutation.SetCreatorID(id)
	return dc
}

// SetNillableCreatorID sets the "creator" edge to the User entity by ID if the given value is not nil.
func (dc *DefinitionCreate) SetNillableCreatorID(id *int) *DefinitionCreate {
	if id != nil {
		dc = dc.SetCreatorID(*id)
	}
	return dc
}

// SetCreator sets the "creator" edge to the User entity.
func (dc *DefinitionCreate) SetCreator(u *User) *DefinitionCreate {
	return dc.SetCreatorID(u.ID)
}

// SetWordID sets the "word" edge to the Word entity by ID.
func (dc *DefinitionCreate) SetWordID(id int) *DefinitionCreate {
	dc.mutation.SetWordID(id)
	return dc
}

// SetNillableWordID sets the "word" edge to the Word entity by ID if the given value is not nil.
func (dc *DefinitionCreate) SetNillableWordID(id *int) *DefinitionCreate {
	if id != nil {
		dc = dc.SetWordID(*id)
	}
	return dc
}

// SetWord sets the "word" edge to the Word entity.
func (dc *DefinitionCreate) SetWord(w *Word) *DefinitionCreate {
	return dc.SetWordID(w.ID)
}

// Mutation returns the DefinitionMutation object of the builder.
func (dc *DefinitionCreate) Mutation() *DefinitionMutation {
	return dc.mutation
}

// Save creates the Definition in the database.
func (dc *DefinitionCreate) Save(ctx context.Context) (*Definition, error) {
	dc.defaults()
	return withHooks(ctx, dc.sqlSave, dc.mutation, dc.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (dc *DefinitionCreate) SaveX(ctx context.Context) *Definition {
	v, err := dc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (dc *DefinitionCreate) Exec(ctx context.Context) error {
	_, err := dc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (dc *DefinitionCreate) ExecX(ctx context.Context) {
	if err := dc.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (dc *DefinitionCreate) defaults() {
	if _, ok := dc.mutation.CreateTime(); !ok {
		v := definition.DefaultCreateTime()
		dc.mutation.SetCreateTime(v)
	}
	if _, ok := dc.mutation.UpdateTime(); !ok {
		v := definition.DefaultUpdateTime()
		dc.mutation.SetUpdateTime(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (dc *DefinitionCreate) check() error {
	if _, ok := dc.mutation.CreateTime(); !ok {
		return &ValidationError{Name: "create_time", err: errors.New(`ent: missing required field "Definition.create_time"`)}
	}
	if _, ok := dc.mutation.UpdateTime(); !ok {
		return &ValidationError{Name: "update_time", err: errors.New(`ent: missing required field "Definition.update_time"`)}
	}
	if _, ok := dc.mutation.Description(); !ok {
		return &ValidationError{Name: "description", err: errors.New(`ent: missing required field "Definition.description"`)}
	}
	if v, ok := dc.mutation.Description(); ok {
		if err := definition.DescriptionValidator(v); err != nil {
			return &ValidationError{Name: "description", err: fmt.Errorf(`ent: validator failed for field "Definition.description": %w`, err)}
		}
	}
	return nil
}

func (dc *DefinitionCreate) sqlSave(ctx context.Context) (*Definition, error) {
	if err := dc.check(); err != nil {
		return nil, err
	}
	_node, _spec := dc.createSpec()
	if err := sqlgraph.CreateNode(ctx, dc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	id := _spec.ID.Value.(int64)
	_node.ID = int(id)
	dc.mutation.id = &_node.ID
	dc.mutation.done = true
	return _node, nil
}

func (dc *DefinitionCreate) createSpec() (*Definition, *sqlgraph.CreateSpec) {
	var (
		_node = &Definition{config: dc.config}
		_spec = sqlgraph.NewCreateSpec(definition.Table, sqlgraph.NewFieldSpec(definition.FieldID, field.TypeInt))
	)
	if value, ok := dc.mutation.CreateTime(); ok {
		_spec.SetField(definition.FieldCreateTime, field.TypeTime, value)
		_node.CreateTime = value
	}
	if value, ok := dc.mutation.UpdateTime(); ok {
		_spec.SetField(definition.FieldUpdateTime, field.TypeTime, value)
		_node.UpdateTime = value
	}
	if value, ok := dc.mutation.Description(); ok {
		_spec.SetField(definition.FieldDescription, field.TypeString, value)
		_node.Description = value
	}
	if nodes := dc.mutation.CreatorIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   definition.CreatorTable,
			Columns: []string{definition.CreatorColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.user_definitions = &nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := dc.mutation.WordIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   definition.WordTable,
			Columns: []string{definition.WordColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(word.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.word_definitions = &nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// DefinitionCreateBulk is the builder for creating many Definition entities in bulk.
type DefinitionCreateBulk struct {
	config
	builders []*DefinitionCreate
}

// Save creates the Definition entities in the database.
func (dcb *DefinitionCreateBulk) Save(ctx context.Context) ([]*Definition, error) {
	specs := make([]*sqlgraph.CreateSpec, len(dcb.builders))
	nodes := make([]*Definition, len(dcb.builders))
	mutators := make([]Mutator, len(dcb.builders))
	for i := range dcb.builders {
		func(i int, root context.Context) {
			builder := dcb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*DefinitionMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, dcb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, dcb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				if specs[i].ID.Value != nil {
					id := specs[i].ID.Value.(int64)
					nodes[i].ID = int(id)
				}
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, dcb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (dcb *DefinitionCreateBulk) SaveX(ctx context.Context) []*Definition {
	v, err := dcb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (dcb *DefinitionCreateBulk) Exec(ctx context.Context) error {
	_, err := dcb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (dcb *DefinitionCreateBulk) ExecX(ctx context.Context) {
	if err := dcb.Exec(ctx); err != nil {
		panic(err)
	}
}
