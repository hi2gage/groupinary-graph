// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"

	"github.com/99designs/gqlgen/graphql"
)

func (d *Definition) Word(ctx context.Context) (*Word, error) {
	result, err := d.Edges.WordOrErr()
	if IsNotLoaded(err) {
		result, err = d.QueryWord().Only(ctx)
	}
	return result, MaskNotFound(err)
}

func (gr *Group) Words(
	ctx context.Context, after *Cursor, first *int, before *Cursor, last *int,
) (*WordConnection, error) {
	opts := []WordPaginateOption{}
	alias := graphql.GetFieldContext(ctx).Field.Alias
	totalCount, hasTotalCount := gr.Edges.totalCount[0][alias]
	if nodes, err := gr.NamedWords(alias); err == nil || hasTotalCount {
		pager, err := newWordPager(opts, last != nil)
		if err != nil {
			return nil, err
		}
		conn := &WordConnection{Edges: []*WordEdge{}, TotalCount: totalCount}
		conn.build(nodes, pager, after, first, before, last)
		return conn, nil
	}
	return gr.QueryWords().Paginate(ctx, after, first, before, last, opts...)
}

func (w *Word) Definitions(
	ctx context.Context, after *Cursor, first *int, before *Cursor, last *int, orderBy *DefinitionOrder,
) (*DefinitionConnection, error) {
	opts := []DefinitionPaginateOption{
		WithDefinitionOrder(orderBy),
	}
	alias := graphql.GetFieldContext(ctx).Field.Alias
	totalCount, hasTotalCount := w.Edges.totalCount[0][alias]
	if nodes, err := w.NamedDefinitions(alias); err == nil || hasTotalCount {
		pager, err := newDefinitionPager(opts, last != nil)
		if err != nil {
			return nil, err
		}
		conn := &DefinitionConnection{Edges: []*DefinitionEdge{}, TotalCount: totalCount}
		conn.build(nodes, pager, after, first, before, last)
		return conn, nil
	}
	return w.QueryDefinitions().Paginate(ctx, after, first, before, last, opts...)
}
