// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"shrektionary_api/ent/definition"
	"shrektionary_api/ent/group"
	"shrektionary_api/ent/predicate"
	"shrektionary_api/ent/user"
	"shrektionary_api/ent/word"
	"sync"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
)

const (
	// Operation types.
	OpCreate    = ent.OpCreate
	OpDelete    = ent.OpDelete
	OpDeleteOne = ent.OpDeleteOne
	OpUpdate    = ent.OpUpdate
	OpUpdateOne = ent.OpUpdateOne

	// Node types.
	TypeDefinition = "Definition"
	TypeGroup      = "Group"
	TypeUser       = "User"
	TypeWord       = "Word"
)

// DefinitionMutation represents an operation that mutates the Definition nodes in the graph.
type DefinitionMutation struct {
	config
	op             Op
	typ            string
	id             *int
	description    *string
	clearedFields  map[string]struct{}
	creator        *int
	clearedcreator bool
	done           bool
	oldValue       func(context.Context) (*Definition, error)
	predicates     []predicate.Definition
}

var _ ent.Mutation = (*DefinitionMutation)(nil)

// definitionOption allows management of the mutation configuration using functional options.
type definitionOption func(*DefinitionMutation)

// newDefinitionMutation creates new mutation for the Definition entity.
func newDefinitionMutation(c config, op Op, opts ...definitionOption) *DefinitionMutation {
	m := &DefinitionMutation{
		config:        c,
		op:            op,
		typ:           TypeDefinition,
		clearedFields: make(map[string]struct{}),
	}
	for _, opt := range opts {
		opt(m)
	}
	return m
}

// withDefinitionID sets the ID field of the mutation.
func withDefinitionID(id int) definitionOption {
	return func(m *DefinitionMutation) {
		var (
			err   error
			once  sync.Once
			value *Definition
		)
		m.oldValue = func(ctx context.Context) (*Definition, error) {
			once.Do(func() {
				if m.done {
					err = errors.New("querying old values post mutation is not allowed")
				} else {
					value, err = m.Client().Definition.Get(ctx, id)
				}
			})
			return value, err
		}
		m.id = &id
	}
}

// withDefinition sets the old Definition of the mutation.
func withDefinition(node *Definition) definitionOption {
	return func(m *DefinitionMutation) {
		m.oldValue = func(context.Context) (*Definition, error) {
			return node, nil
		}
		m.id = &node.ID
	}
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m DefinitionMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m DefinitionMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, errors.New("ent: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// ID returns the ID value in the mutation. Note that the ID is only available
// if it was provided to the builder or after it was returned from the database.
func (m *DefinitionMutation) ID() (id int, exists bool) {
	if m.id == nil {
		return
	}
	return *m.id, true
}

// IDs queries the database and returns the entity ids that match the mutation's predicate.
// That means, if the mutation is applied within a transaction with an isolation level such
// as sql.LevelSerializable, the returned ids match the ids of the rows that will be updated
// or updated by the mutation.
func (m *DefinitionMutation) IDs(ctx context.Context) ([]int, error) {
	switch {
	case m.op.Is(OpUpdateOne | OpDeleteOne):
		id, exists := m.ID()
		if exists {
			return []int{id}, nil
		}
		fallthrough
	case m.op.Is(OpUpdate | OpDelete):
		return m.Client().Definition.Query().Where(m.predicates...).IDs(ctx)
	default:
		return nil, fmt.Errorf("IDs is not allowed on %s operations", m.op)
	}
}

// SetDescription sets the "description" field.
func (m *DefinitionMutation) SetDescription(s string) {
	m.description = &s
}

// Description returns the value of the "description" field in the mutation.
func (m *DefinitionMutation) Description() (r string, exists bool) {
	v := m.description
	if v == nil {
		return
	}
	return *v, true
}

// OldDescription returns the old "description" field's value of the Definition entity.
// If the Definition object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *DefinitionMutation) OldDescription(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldDescription is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldDescription requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldDescription: %w", err)
	}
	return oldValue.Description, nil
}

// ResetDescription resets all changes to the "description" field.
func (m *DefinitionMutation) ResetDescription() {
	m.description = nil
}

// SetCreatorID sets the "creator" edge to the User entity by id.
func (m *DefinitionMutation) SetCreatorID(id int) {
	m.creator = &id
}

// ClearCreator clears the "creator" edge to the User entity.
func (m *DefinitionMutation) ClearCreator() {
	m.clearedcreator = true
}

// CreatorCleared reports if the "creator" edge to the User entity was cleared.
func (m *DefinitionMutation) CreatorCleared() bool {
	return m.clearedcreator
}

// CreatorID returns the "creator" edge ID in the mutation.
func (m *DefinitionMutation) CreatorID() (id int, exists bool) {
	if m.creator != nil {
		return *m.creator, true
	}
	return
}

// CreatorIDs returns the "creator" edge IDs in the mutation.
// Note that IDs always returns len(IDs) <= 1 for unique edges, and you should use
// CreatorID instead. It exists only for internal usage by the builders.
func (m *DefinitionMutation) CreatorIDs() (ids []int) {
	if id := m.creator; id != nil {
		ids = append(ids, *id)
	}
	return
}

// ResetCreator resets all changes to the "creator" edge.
func (m *DefinitionMutation) ResetCreator() {
	m.creator = nil
	m.clearedcreator = false
}

// Where appends a list predicates to the DefinitionMutation builder.
func (m *DefinitionMutation) Where(ps ...predicate.Definition) {
	m.predicates = append(m.predicates, ps...)
}

// WhereP appends storage-level predicates to the DefinitionMutation builder. Using this method,
// users can use type-assertion to append predicates that do not depend on any generated package.
func (m *DefinitionMutation) WhereP(ps ...func(*sql.Selector)) {
	p := make([]predicate.Definition, len(ps))
	for i := range ps {
		p[i] = ps[i]
	}
	m.Where(p...)
}

// Op returns the operation name.
func (m *DefinitionMutation) Op() Op {
	return m.op
}

// SetOp allows setting the mutation operation.
func (m *DefinitionMutation) SetOp(op Op) {
	m.op = op
}

// Type returns the node type of this mutation (Definition).
func (m *DefinitionMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during this mutation. Note that in
// order to get all numeric fields that were incremented/decremented, call
// AddedFields().
func (m *DefinitionMutation) Fields() []string {
	fields := make([]string, 0, 1)
	if m.description != nil {
		fields = append(fields, definition.FieldDescription)
	}
	return fields
}

// Field returns the value of a field with the given name. The second boolean
// return value indicates that this field was not set, or was not defined in the
// schema.
func (m *DefinitionMutation) Field(name string) (ent.Value, bool) {
	switch name {
	case definition.FieldDescription:
		return m.Description()
	}
	return nil, false
}

// OldField returns the old value of the field from the database. An error is
// returned if the mutation operation is not UpdateOne, or the query to the
// database failed.
func (m *DefinitionMutation) OldField(ctx context.Context, name string) (ent.Value, error) {
	switch name {
	case definition.FieldDescription:
		return m.OldDescription(ctx)
	}
	return nil, fmt.Errorf("unknown Definition field %s", name)
}

// SetField sets the value of a field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *DefinitionMutation) SetField(name string, value ent.Value) error {
	switch name {
	case definition.FieldDescription:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetDescription(v)
		return nil
	}
	return fmt.Errorf("unknown Definition field %s", name)
}

// AddedFields returns all numeric fields that were incremented/decremented during
// this mutation.
func (m *DefinitionMutation) AddedFields() []string {
	return nil
}

// AddedField returns the numeric value that was incremented/decremented on a field
// with the given name. The second boolean return value indicates that this field
// was not set, or was not defined in the schema.
func (m *DefinitionMutation) AddedField(name string) (ent.Value, bool) {
	return nil, false
}

// AddField adds the value to the field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *DefinitionMutation) AddField(name string, value ent.Value) error {
	switch name {
	}
	return fmt.Errorf("unknown Definition numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared during this
// mutation.
func (m *DefinitionMutation) ClearedFields() []string {
	return nil
}

// FieldCleared returns a boolean indicating if a field with the given name was
// cleared in this mutation.
func (m *DefinitionMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value of the field with the given name. It returns an
// error if the field is not defined in the schema.
func (m *DefinitionMutation) ClearField(name string) error {
	return fmt.Errorf("unknown Definition nullable field %s", name)
}

// ResetField resets all changes in the mutation for the field with the given name.
// It returns an error if the field is not defined in the schema.
func (m *DefinitionMutation) ResetField(name string) error {
	switch name {
	case definition.FieldDescription:
		m.ResetDescription()
		return nil
	}
	return fmt.Errorf("unknown Definition field %s", name)
}

// AddedEdges returns all edge names that were set/added in this mutation.
func (m *DefinitionMutation) AddedEdges() []string {
	edges := make([]string, 0, 1)
	if m.creator != nil {
		edges = append(edges, definition.EdgeCreator)
	}
	return edges
}

// AddedIDs returns all IDs (to other nodes) that were added for the given edge
// name in this mutation.
func (m *DefinitionMutation) AddedIDs(name string) []ent.Value {
	switch name {
	case definition.EdgeCreator:
		if id := m.creator; id != nil {
			return []ent.Value{*id}
		}
	}
	return nil
}

// RemovedEdges returns all edge names that were removed in this mutation.
func (m *DefinitionMutation) RemovedEdges() []string {
	edges := make([]string, 0, 1)
	return edges
}

// RemovedIDs returns all IDs (to other nodes) that were removed for the edge with
// the given name in this mutation.
func (m *DefinitionMutation) RemovedIDs(name string) []ent.Value {
	return nil
}

// ClearedEdges returns all edge names that were cleared in this mutation.
func (m *DefinitionMutation) ClearedEdges() []string {
	edges := make([]string, 0, 1)
	if m.clearedcreator {
		edges = append(edges, definition.EdgeCreator)
	}
	return edges
}

// EdgeCleared returns a boolean which indicates if the edge with the given name
// was cleared in this mutation.
func (m *DefinitionMutation) EdgeCleared(name string) bool {
	switch name {
	case definition.EdgeCreator:
		return m.clearedcreator
	}
	return false
}

// ClearEdge clears the value of the edge with the given name. It returns an error
// if that edge is not defined in the schema.
func (m *DefinitionMutation) ClearEdge(name string) error {
	switch name {
	case definition.EdgeCreator:
		m.ClearCreator()
		return nil
	}
	return fmt.Errorf("unknown Definition unique edge %s", name)
}

// ResetEdge resets all changes to the edge with the given name in this mutation.
// It returns an error if the edge is not defined in the schema.
func (m *DefinitionMutation) ResetEdge(name string) error {
	switch name {
	case definition.EdgeCreator:
		m.ResetCreator()
		return nil
	}
	return fmt.Errorf("unknown Definition edge %s", name)
}

// GroupMutation represents an operation that mutates the Group nodes in the graph.
type GroupMutation struct {
	config
	op               Op
	typ              string
	id               *int
	description      *string
	clearedFields    map[string]struct{}
	rootWords        map[int]struct{}
	removedrootWords map[int]struct{}
	clearedrootWords bool
	users            map[int]struct{}
	removedusers     map[int]struct{}
	clearedusers     bool
	done             bool
	oldValue         func(context.Context) (*Group, error)
	predicates       []predicate.Group
}

var _ ent.Mutation = (*GroupMutation)(nil)

// groupOption allows management of the mutation configuration using functional options.
type groupOption func(*GroupMutation)

// newGroupMutation creates new mutation for the Group entity.
func newGroupMutation(c config, op Op, opts ...groupOption) *GroupMutation {
	m := &GroupMutation{
		config:        c,
		op:            op,
		typ:           TypeGroup,
		clearedFields: make(map[string]struct{}),
	}
	for _, opt := range opts {
		opt(m)
	}
	return m
}

// withGroupID sets the ID field of the mutation.
func withGroupID(id int) groupOption {
	return func(m *GroupMutation) {
		var (
			err   error
			once  sync.Once
			value *Group
		)
		m.oldValue = func(ctx context.Context) (*Group, error) {
			once.Do(func() {
				if m.done {
					err = errors.New("querying old values post mutation is not allowed")
				} else {
					value, err = m.Client().Group.Get(ctx, id)
				}
			})
			return value, err
		}
		m.id = &id
	}
}

// withGroup sets the old Group of the mutation.
func withGroup(node *Group) groupOption {
	return func(m *GroupMutation) {
		m.oldValue = func(context.Context) (*Group, error) {
			return node, nil
		}
		m.id = &node.ID
	}
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m GroupMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m GroupMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, errors.New("ent: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// ID returns the ID value in the mutation. Note that the ID is only available
// if it was provided to the builder or after it was returned from the database.
func (m *GroupMutation) ID() (id int, exists bool) {
	if m.id == nil {
		return
	}
	return *m.id, true
}

// IDs queries the database and returns the entity ids that match the mutation's predicate.
// That means, if the mutation is applied within a transaction with an isolation level such
// as sql.LevelSerializable, the returned ids match the ids of the rows that will be updated
// or updated by the mutation.
func (m *GroupMutation) IDs(ctx context.Context) ([]int, error) {
	switch {
	case m.op.Is(OpUpdateOne | OpDeleteOne):
		id, exists := m.ID()
		if exists {
			return []int{id}, nil
		}
		fallthrough
	case m.op.Is(OpUpdate | OpDelete):
		return m.Client().Group.Query().Where(m.predicates...).IDs(ctx)
	default:
		return nil, fmt.Errorf("IDs is not allowed on %s operations", m.op)
	}
}

// SetDescription sets the "description" field.
func (m *GroupMutation) SetDescription(s string) {
	m.description = &s
}

// Description returns the value of the "description" field in the mutation.
func (m *GroupMutation) Description() (r string, exists bool) {
	v := m.description
	if v == nil {
		return
	}
	return *v, true
}

// OldDescription returns the old "description" field's value of the Group entity.
// If the Group object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *GroupMutation) OldDescription(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldDescription is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldDescription requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldDescription: %w", err)
	}
	return oldValue.Description, nil
}

// ResetDescription resets all changes to the "description" field.
func (m *GroupMutation) ResetDescription() {
	m.description = nil
}

// AddRootWordIDs adds the "rootWords" edge to the Word entity by ids.
func (m *GroupMutation) AddRootWordIDs(ids ...int) {
	if m.rootWords == nil {
		m.rootWords = make(map[int]struct{})
	}
	for i := range ids {
		m.rootWords[ids[i]] = struct{}{}
	}
}

// ClearRootWords clears the "rootWords" edge to the Word entity.
func (m *GroupMutation) ClearRootWords() {
	m.clearedrootWords = true
}

// RootWordsCleared reports if the "rootWords" edge to the Word entity was cleared.
func (m *GroupMutation) RootWordsCleared() bool {
	return m.clearedrootWords
}

// RemoveRootWordIDs removes the "rootWords" edge to the Word entity by IDs.
func (m *GroupMutation) RemoveRootWordIDs(ids ...int) {
	if m.removedrootWords == nil {
		m.removedrootWords = make(map[int]struct{})
	}
	for i := range ids {
		delete(m.rootWords, ids[i])
		m.removedrootWords[ids[i]] = struct{}{}
	}
}

// RemovedRootWords returns the removed IDs of the "rootWords" edge to the Word entity.
func (m *GroupMutation) RemovedRootWordsIDs() (ids []int) {
	for id := range m.removedrootWords {
		ids = append(ids, id)
	}
	return
}

// RootWordsIDs returns the "rootWords" edge IDs in the mutation.
func (m *GroupMutation) RootWordsIDs() (ids []int) {
	for id := range m.rootWords {
		ids = append(ids, id)
	}
	return
}

// ResetRootWords resets all changes to the "rootWords" edge.
func (m *GroupMutation) ResetRootWords() {
	m.rootWords = nil
	m.clearedrootWords = false
	m.removedrootWords = nil
}

// AddUserIDs adds the "users" edge to the User entity by ids.
func (m *GroupMutation) AddUserIDs(ids ...int) {
	if m.users == nil {
		m.users = make(map[int]struct{})
	}
	for i := range ids {
		m.users[ids[i]] = struct{}{}
	}
}

// ClearUsers clears the "users" edge to the User entity.
func (m *GroupMutation) ClearUsers() {
	m.clearedusers = true
}

// UsersCleared reports if the "users" edge to the User entity was cleared.
func (m *GroupMutation) UsersCleared() bool {
	return m.clearedusers
}

// RemoveUserIDs removes the "users" edge to the User entity by IDs.
func (m *GroupMutation) RemoveUserIDs(ids ...int) {
	if m.removedusers == nil {
		m.removedusers = make(map[int]struct{})
	}
	for i := range ids {
		delete(m.users, ids[i])
		m.removedusers[ids[i]] = struct{}{}
	}
}

// RemovedUsers returns the removed IDs of the "users" edge to the User entity.
func (m *GroupMutation) RemovedUsersIDs() (ids []int) {
	for id := range m.removedusers {
		ids = append(ids, id)
	}
	return
}

// UsersIDs returns the "users" edge IDs in the mutation.
func (m *GroupMutation) UsersIDs() (ids []int) {
	for id := range m.users {
		ids = append(ids, id)
	}
	return
}

// ResetUsers resets all changes to the "users" edge.
func (m *GroupMutation) ResetUsers() {
	m.users = nil
	m.clearedusers = false
	m.removedusers = nil
}

// Where appends a list predicates to the GroupMutation builder.
func (m *GroupMutation) Where(ps ...predicate.Group) {
	m.predicates = append(m.predicates, ps...)
}

// WhereP appends storage-level predicates to the GroupMutation builder. Using this method,
// users can use type-assertion to append predicates that do not depend on any generated package.
func (m *GroupMutation) WhereP(ps ...func(*sql.Selector)) {
	p := make([]predicate.Group, len(ps))
	for i := range ps {
		p[i] = ps[i]
	}
	m.Where(p...)
}

// Op returns the operation name.
func (m *GroupMutation) Op() Op {
	return m.op
}

// SetOp allows setting the mutation operation.
func (m *GroupMutation) SetOp(op Op) {
	m.op = op
}

// Type returns the node type of this mutation (Group).
func (m *GroupMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during this mutation. Note that in
// order to get all numeric fields that were incremented/decremented, call
// AddedFields().
func (m *GroupMutation) Fields() []string {
	fields := make([]string, 0, 1)
	if m.description != nil {
		fields = append(fields, group.FieldDescription)
	}
	return fields
}

// Field returns the value of a field with the given name. The second boolean
// return value indicates that this field was not set, or was not defined in the
// schema.
func (m *GroupMutation) Field(name string) (ent.Value, bool) {
	switch name {
	case group.FieldDescription:
		return m.Description()
	}
	return nil, false
}

// OldField returns the old value of the field from the database. An error is
// returned if the mutation operation is not UpdateOne, or the query to the
// database failed.
func (m *GroupMutation) OldField(ctx context.Context, name string) (ent.Value, error) {
	switch name {
	case group.FieldDescription:
		return m.OldDescription(ctx)
	}
	return nil, fmt.Errorf("unknown Group field %s", name)
}

// SetField sets the value of a field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *GroupMutation) SetField(name string, value ent.Value) error {
	switch name {
	case group.FieldDescription:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetDescription(v)
		return nil
	}
	return fmt.Errorf("unknown Group field %s", name)
}

// AddedFields returns all numeric fields that were incremented/decremented during
// this mutation.
func (m *GroupMutation) AddedFields() []string {
	return nil
}

// AddedField returns the numeric value that was incremented/decremented on a field
// with the given name. The second boolean return value indicates that this field
// was not set, or was not defined in the schema.
func (m *GroupMutation) AddedField(name string) (ent.Value, bool) {
	return nil, false
}

// AddField adds the value to the field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *GroupMutation) AddField(name string, value ent.Value) error {
	switch name {
	}
	return fmt.Errorf("unknown Group numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared during this
// mutation.
func (m *GroupMutation) ClearedFields() []string {
	return nil
}

// FieldCleared returns a boolean indicating if a field with the given name was
// cleared in this mutation.
func (m *GroupMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value of the field with the given name. It returns an
// error if the field is not defined in the schema.
func (m *GroupMutation) ClearField(name string) error {
	return fmt.Errorf("unknown Group nullable field %s", name)
}

// ResetField resets all changes in the mutation for the field with the given name.
// It returns an error if the field is not defined in the schema.
func (m *GroupMutation) ResetField(name string) error {
	switch name {
	case group.FieldDescription:
		m.ResetDescription()
		return nil
	}
	return fmt.Errorf("unknown Group field %s", name)
}

// AddedEdges returns all edge names that were set/added in this mutation.
func (m *GroupMutation) AddedEdges() []string {
	edges := make([]string, 0, 2)
	if m.rootWords != nil {
		edges = append(edges, group.EdgeRootWords)
	}
	if m.users != nil {
		edges = append(edges, group.EdgeUsers)
	}
	return edges
}

// AddedIDs returns all IDs (to other nodes) that were added for the given edge
// name in this mutation.
func (m *GroupMutation) AddedIDs(name string) []ent.Value {
	switch name {
	case group.EdgeRootWords:
		ids := make([]ent.Value, 0, len(m.rootWords))
		for id := range m.rootWords {
			ids = append(ids, id)
		}
		return ids
	case group.EdgeUsers:
		ids := make([]ent.Value, 0, len(m.users))
		for id := range m.users {
			ids = append(ids, id)
		}
		return ids
	}
	return nil
}

// RemovedEdges returns all edge names that were removed in this mutation.
func (m *GroupMutation) RemovedEdges() []string {
	edges := make([]string, 0, 2)
	if m.removedrootWords != nil {
		edges = append(edges, group.EdgeRootWords)
	}
	if m.removedusers != nil {
		edges = append(edges, group.EdgeUsers)
	}
	return edges
}

// RemovedIDs returns all IDs (to other nodes) that were removed for the edge with
// the given name in this mutation.
func (m *GroupMutation) RemovedIDs(name string) []ent.Value {
	switch name {
	case group.EdgeRootWords:
		ids := make([]ent.Value, 0, len(m.removedrootWords))
		for id := range m.removedrootWords {
			ids = append(ids, id)
		}
		return ids
	case group.EdgeUsers:
		ids := make([]ent.Value, 0, len(m.removedusers))
		for id := range m.removedusers {
			ids = append(ids, id)
		}
		return ids
	}
	return nil
}

// ClearedEdges returns all edge names that were cleared in this mutation.
func (m *GroupMutation) ClearedEdges() []string {
	edges := make([]string, 0, 2)
	if m.clearedrootWords {
		edges = append(edges, group.EdgeRootWords)
	}
	if m.clearedusers {
		edges = append(edges, group.EdgeUsers)
	}
	return edges
}

// EdgeCleared returns a boolean which indicates if the edge with the given name
// was cleared in this mutation.
func (m *GroupMutation) EdgeCleared(name string) bool {
	switch name {
	case group.EdgeRootWords:
		return m.clearedrootWords
	case group.EdgeUsers:
		return m.clearedusers
	}
	return false
}

// ClearEdge clears the value of the edge with the given name. It returns an error
// if that edge is not defined in the schema.
func (m *GroupMutation) ClearEdge(name string) error {
	switch name {
	}
	return fmt.Errorf("unknown Group unique edge %s", name)
}

// ResetEdge resets all changes to the edge with the given name in this mutation.
// It returns an error if the edge is not defined in the schema.
func (m *GroupMutation) ResetEdge(name string) error {
	switch name {
	case group.EdgeRootWords:
		m.ResetRootWords()
		return nil
	case group.EdgeUsers:
		m.ResetUsers()
		return nil
	}
	return fmt.Errorf("unknown Group edge %s", name)
}

// UserMutation represents an operation that mutates the User nodes in the graph.
type UserMutation struct {
	config
	op                 Op
	typ                string
	id                 *int
	authID             *string
	clearedFields      map[string]struct{}
	groups             map[int]struct{}
	removedgroups      map[int]struct{}
	clearedgroups      bool
	definitions        map[int]struct{}
	removeddefinitions map[int]struct{}
	cleareddefinitions bool
	words              map[int]struct{}
	removedwords       map[int]struct{}
	clearedwords       bool
	done               bool
	oldValue           func(context.Context) (*User, error)
	predicates         []predicate.User
}

var _ ent.Mutation = (*UserMutation)(nil)

// userOption allows management of the mutation configuration using functional options.
type userOption func(*UserMutation)

// newUserMutation creates new mutation for the User entity.
func newUserMutation(c config, op Op, opts ...userOption) *UserMutation {
	m := &UserMutation{
		config:        c,
		op:            op,
		typ:           TypeUser,
		clearedFields: make(map[string]struct{}),
	}
	for _, opt := range opts {
		opt(m)
	}
	return m
}

// withUserID sets the ID field of the mutation.
func withUserID(id int) userOption {
	return func(m *UserMutation) {
		var (
			err   error
			once  sync.Once
			value *User
		)
		m.oldValue = func(ctx context.Context) (*User, error) {
			once.Do(func() {
				if m.done {
					err = errors.New("querying old values post mutation is not allowed")
				} else {
					value, err = m.Client().User.Get(ctx, id)
				}
			})
			return value, err
		}
		m.id = &id
	}
}

// withUser sets the old User of the mutation.
func withUser(node *User) userOption {
	return func(m *UserMutation) {
		m.oldValue = func(context.Context) (*User, error) {
			return node, nil
		}
		m.id = &node.ID
	}
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m UserMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m UserMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, errors.New("ent: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// ID returns the ID value in the mutation. Note that the ID is only available
// if it was provided to the builder or after it was returned from the database.
func (m *UserMutation) ID() (id int, exists bool) {
	if m.id == nil {
		return
	}
	return *m.id, true
}

// IDs queries the database and returns the entity ids that match the mutation's predicate.
// That means, if the mutation is applied within a transaction with an isolation level such
// as sql.LevelSerializable, the returned ids match the ids of the rows that will be updated
// or updated by the mutation.
func (m *UserMutation) IDs(ctx context.Context) ([]int, error) {
	switch {
	case m.op.Is(OpUpdateOne | OpDeleteOne):
		id, exists := m.ID()
		if exists {
			return []int{id}, nil
		}
		fallthrough
	case m.op.Is(OpUpdate | OpDelete):
		return m.Client().User.Query().Where(m.predicates...).IDs(ctx)
	default:
		return nil, fmt.Errorf("IDs is not allowed on %s operations", m.op)
	}
}

// SetAuthID sets the "authID" field.
func (m *UserMutation) SetAuthID(s string) {
	m.authID = &s
}

// AuthID returns the value of the "authID" field in the mutation.
func (m *UserMutation) AuthID() (r string, exists bool) {
	v := m.authID
	if v == nil {
		return
	}
	return *v, true
}

// OldAuthID returns the old "authID" field's value of the User entity.
// If the User object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *UserMutation) OldAuthID(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldAuthID is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldAuthID requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldAuthID: %w", err)
	}
	return oldValue.AuthID, nil
}

// ResetAuthID resets all changes to the "authID" field.
func (m *UserMutation) ResetAuthID() {
	m.authID = nil
}

// AddGroupIDs adds the "groups" edge to the Group entity by ids.
func (m *UserMutation) AddGroupIDs(ids ...int) {
	if m.groups == nil {
		m.groups = make(map[int]struct{})
	}
	for i := range ids {
		m.groups[ids[i]] = struct{}{}
	}
}

// ClearGroups clears the "groups" edge to the Group entity.
func (m *UserMutation) ClearGroups() {
	m.clearedgroups = true
}

// GroupsCleared reports if the "groups" edge to the Group entity was cleared.
func (m *UserMutation) GroupsCleared() bool {
	return m.clearedgroups
}

// RemoveGroupIDs removes the "groups" edge to the Group entity by IDs.
func (m *UserMutation) RemoveGroupIDs(ids ...int) {
	if m.removedgroups == nil {
		m.removedgroups = make(map[int]struct{})
	}
	for i := range ids {
		delete(m.groups, ids[i])
		m.removedgroups[ids[i]] = struct{}{}
	}
}

// RemovedGroups returns the removed IDs of the "groups" edge to the Group entity.
func (m *UserMutation) RemovedGroupsIDs() (ids []int) {
	for id := range m.removedgroups {
		ids = append(ids, id)
	}
	return
}

// GroupsIDs returns the "groups" edge IDs in the mutation.
func (m *UserMutation) GroupsIDs() (ids []int) {
	for id := range m.groups {
		ids = append(ids, id)
	}
	return
}

// ResetGroups resets all changes to the "groups" edge.
func (m *UserMutation) ResetGroups() {
	m.groups = nil
	m.clearedgroups = false
	m.removedgroups = nil
}

// AddDefinitionIDs adds the "definitions" edge to the Definition entity by ids.
func (m *UserMutation) AddDefinitionIDs(ids ...int) {
	if m.definitions == nil {
		m.definitions = make(map[int]struct{})
	}
	for i := range ids {
		m.definitions[ids[i]] = struct{}{}
	}
}

// ClearDefinitions clears the "definitions" edge to the Definition entity.
func (m *UserMutation) ClearDefinitions() {
	m.cleareddefinitions = true
}

// DefinitionsCleared reports if the "definitions" edge to the Definition entity was cleared.
func (m *UserMutation) DefinitionsCleared() bool {
	return m.cleareddefinitions
}

// RemoveDefinitionIDs removes the "definitions" edge to the Definition entity by IDs.
func (m *UserMutation) RemoveDefinitionIDs(ids ...int) {
	if m.removeddefinitions == nil {
		m.removeddefinitions = make(map[int]struct{})
	}
	for i := range ids {
		delete(m.definitions, ids[i])
		m.removeddefinitions[ids[i]] = struct{}{}
	}
}

// RemovedDefinitions returns the removed IDs of the "definitions" edge to the Definition entity.
func (m *UserMutation) RemovedDefinitionsIDs() (ids []int) {
	for id := range m.removeddefinitions {
		ids = append(ids, id)
	}
	return
}

// DefinitionsIDs returns the "definitions" edge IDs in the mutation.
func (m *UserMutation) DefinitionsIDs() (ids []int) {
	for id := range m.definitions {
		ids = append(ids, id)
	}
	return
}

// ResetDefinitions resets all changes to the "definitions" edge.
func (m *UserMutation) ResetDefinitions() {
	m.definitions = nil
	m.cleareddefinitions = false
	m.removeddefinitions = nil
}

// AddWordIDs adds the "words" edge to the Word entity by ids.
func (m *UserMutation) AddWordIDs(ids ...int) {
	if m.words == nil {
		m.words = make(map[int]struct{})
	}
	for i := range ids {
		m.words[ids[i]] = struct{}{}
	}
}

// ClearWords clears the "words" edge to the Word entity.
func (m *UserMutation) ClearWords() {
	m.clearedwords = true
}

// WordsCleared reports if the "words" edge to the Word entity was cleared.
func (m *UserMutation) WordsCleared() bool {
	return m.clearedwords
}

// RemoveWordIDs removes the "words" edge to the Word entity by IDs.
func (m *UserMutation) RemoveWordIDs(ids ...int) {
	if m.removedwords == nil {
		m.removedwords = make(map[int]struct{})
	}
	for i := range ids {
		delete(m.words, ids[i])
		m.removedwords[ids[i]] = struct{}{}
	}
}

// RemovedWords returns the removed IDs of the "words" edge to the Word entity.
func (m *UserMutation) RemovedWordsIDs() (ids []int) {
	for id := range m.removedwords {
		ids = append(ids, id)
	}
	return
}

// WordsIDs returns the "words" edge IDs in the mutation.
func (m *UserMutation) WordsIDs() (ids []int) {
	for id := range m.words {
		ids = append(ids, id)
	}
	return
}

// ResetWords resets all changes to the "words" edge.
func (m *UserMutation) ResetWords() {
	m.words = nil
	m.clearedwords = false
	m.removedwords = nil
}

// Where appends a list predicates to the UserMutation builder.
func (m *UserMutation) Where(ps ...predicate.User) {
	m.predicates = append(m.predicates, ps...)
}

// WhereP appends storage-level predicates to the UserMutation builder. Using this method,
// users can use type-assertion to append predicates that do not depend on any generated package.
func (m *UserMutation) WhereP(ps ...func(*sql.Selector)) {
	p := make([]predicate.User, len(ps))
	for i := range ps {
		p[i] = ps[i]
	}
	m.Where(p...)
}

// Op returns the operation name.
func (m *UserMutation) Op() Op {
	return m.op
}

// SetOp allows setting the mutation operation.
func (m *UserMutation) SetOp(op Op) {
	m.op = op
}

// Type returns the node type of this mutation (User).
func (m *UserMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during this mutation. Note that in
// order to get all numeric fields that were incremented/decremented, call
// AddedFields().
func (m *UserMutation) Fields() []string {
	fields := make([]string, 0, 1)
	if m.authID != nil {
		fields = append(fields, user.FieldAuthID)
	}
	return fields
}

// Field returns the value of a field with the given name. The second boolean
// return value indicates that this field was not set, or was not defined in the
// schema.
func (m *UserMutation) Field(name string) (ent.Value, bool) {
	switch name {
	case user.FieldAuthID:
		return m.AuthID()
	}
	return nil, false
}

// OldField returns the old value of the field from the database. An error is
// returned if the mutation operation is not UpdateOne, or the query to the
// database failed.
func (m *UserMutation) OldField(ctx context.Context, name string) (ent.Value, error) {
	switch name {
	case user.FieldAuthID:
		return m.OldAuthID(ctx)
	}
	return nil, fmt.Errorf("unknown User field %s", name)
}

// SetField sets the value of a field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *UserMutation) SetField(name string, value ent.Value) error {
	switch name {
	case user.FieldAuthID:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetAuthID(v)
		return nil
	}
	return fmt.Errorf("unknown User field %s", name)
}

// AddedFields returns all numeric fields that were incremented/decremented during
// this mutation.
func (m *UserMutation) AddedFields() []string {
	return nil
}

// AddedField returns the numeric value that was incremented/decremented on a field
// with the given name. The second boolean return value indicates that this field
// was not set, or was not defined in the schema.
func (m *UserMutation) AddedField(name string) (ent.Value, bool) {
	return nil, false
}

// AddField adds the value to the field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *UserMutation) AddField(name string, value ent.Value) error {
	switch name {
	}
	return fmt.Errorf("unknown User numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared during this
// mutation.
func (m *UserMutation) ClearedFields() []string {
	return nil
}

// FieldCleared returns a boolean indicating if a field with the given name was
// cleared in this mutation.
func (m *UserMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value of the field with the given name. It returns an
// error if the field is not defined in the schema.
func (m *UserMutation) ClearField(name string) error {
	return fmt.Errorf("unknown User nullable field %s", name)
}

// ResetField resets all changes in the mutation for the field with the given name.
// It returns an error if the field is not defined in the schema.
func (m *UserMutation) ResetField(name string) error {
	switch name {
	case user.FieldAuthID:
		m.ResetAuthID()
		return nil
	}
	return fmt.Errorf("unknown User field %s", name)
}

// AddedEdges returns all edge names that were set/added in this mutation.
func (m *UserMutation) AddedEdges() []string {
	edges := make([]string, 0, 3)
	if m.groups != nil {
		edges = append(edges, user.EdgeGroups)
	}
	if m.definitions != nil {
		edges = append(edges, user.EdgeDefinitions)
	}
	if m.words != nil {
		edges = append(edges, user.EdgeWords)
	}
	return edges
}

// AddedIDs returns all IDs (to other nodes) that were added for the given edge
// name in this mutation.
func (m *UserMutation) AddedIDs(name string) []ent.Value {
	switch name {
	case user.EdgeGroups:
		ids := make([]ent.Value, 0, len(m.groups))
		for id := range m.groups {
			ids = append(ids, id)
		}
		return ids
	case user.EdgeDefinitions:
		ids := make([]ent.Value, 0, len(m.definitions))
		for id := range m.definitions {
			ids = append(ids, id)
		}
		return ids
	case user.EdgeWords:
		ids := make([]ent.Value, 0, len(m.words))
		for id := range m.words {
			ids = append(ids, id)
		}
		return ids
	}
	return nil
}

// RemovedEdges returns all edge names that were removed in this mutation.
func (m *UserMutation) RemovedEdges() []string {
	edges := make([]string, 0, 3)
	if m.removedgroups != nil {
		edges = append(edges, user.EdgeGroups)
	}
	if m.removeddefinitions != nil {
		edges = append(edges, user.EdgeDefinitions)
	}
	if m.removedwords != nil {
		edges = append(edges, user.EdgeWords)
	}
	return edges
}

// RemovedIDs returns all IDs (to other nodes) that were removed for the edge with
// the given name in this mutation.
func (m *UserMutation) RemovedIDs(name string) []ent.Value {
	switch name {
	case user.EdgeGroups:
		ids := make([]ent.Value, 0, len(m.removedgroups))
		for id := range m.removedgroups {
			ids = append(ids, id)
		}
		return ids
	case user.EdgeDefinitions:
		ids := make([]ent.Value, 0, len(m.removeddefinitions))
		for id := range m.removeddefinitions {
			ids = append(ids, id)
		}
		return ids
	case user.EdgeWords:
		ids := make([]ent.Value, 0, len(m.removedwords))
		for id := range m.removedwords {
			ids = append(ids, id)
		}
		return ids
	}
	return nil
}

// ClearedEdges returns all edge names that were cleared in this mutation.
func (m *UserMutation) ClearedEdges() []string {
	edges := make([]string, 0, 3)
	if m.clearedgroups {
		edges = append(edges, user.EdgeGroups)
	}
	if m.cleareddefinitions {
		edges = append(edges, user.EdgeDefinitions)
	}
	if m.clearedwords {
		edges = append(edges, user.EdgeWords)
	}
	return edges
}

// EdgeCleared returns a boolean which indicates if the edge with the given name
// was cleared in this mutation.
func (m *UserMutation) EdgeCleared(name string) bool {
	switch name {
	case user.EdgeGroups:
		return m.clearedgroups
	case user.EdgeDefinitions:
		return m.cleareddefinitions
	case user.EdgeWords:
		return m.clearedwords
	}
	return false
}

// ClearEdge clears the value of the edge with the given name. It returns an error
// if that edge is not defined in the schema.
func (m *UserMutation) ClearEdge(name string) error {
	switch name {
	}
	return fmt.Errorf("unknown User unique edge %s", name)
}

// ResetEdge resets all changes to the edge with the given name in this mutation.
// It returns an error if the edge is not defined in the schema.
func (m *UserMutation) ResetEdge(name string) error {
	switch name {
	case user.EdgeGroups:
		m.ResetGroups()
		return nil
	case user.EdgeDefinitions:
		m.ResetDefinitions()
		return nil
	case user.EdgeWords:
		m.ResetWords()
		return nil
	}
	return fmt.Errorf("unknown User edge %s", name)
}

// WordMutation represents an operation that mutates the Word nodes in the graph.
type WordMutation struct {
	config
	op                 Op
	typ                string
	id                 *int
	description        *string
	descendantCount    *int
	adddescendantCount *int
	clearedFields      map[string]struct{}
	creator            *int
	clearedcreator     bool
	group              *int
	clearedgroup       bool
	definitions        map[int]struct{}
	removeddefinitions map[int]struct{}
	cleareddefinitions bool
	descendants        map[int]struct{}
	removeddescendants map[int]struct{}
	cleareddescendants bool
	parents            map[int]struct{}
	removedparents     map[int]struct{}
	clearedparents     bool
	done               bool
	oldValue           func(context.Context) (*Word, error)
	predicates         []predicate.Word
}

var _ ent.Mutation = (*WordMutation)(nil)

// wordOption allows management of the mutation configuration using functional options.
type wordOption func(*WordMutation)

// newWordMutation creates new mutation for the Word entity.
func newWordMutation(c config, op Op, opts ...wordOption) *WordMutation {
	m := &WordMutation{
		config:        c,
		op:            op,
		typ:           TypeWord,
		clearedFields: make(map[string]struct{}),
	}
	for _, opt := range opts {
		opt(m)
	}
	return m
}

// withWordID sets the ID field of the mutation.
func withWordID(id int) wordOption {
	return func(m *WordMutation) {
		var (
			err   error
			once  sync.Once
			value *Word
		)
		m.oldValue = func(ctx context.Context) (*Word, error) {
			once.Do(func() {
				if m.done {
					err = errors.New("querying old values post mutation is not allowed")
				} else {
					value, err = m.Client().Word.Get(ctx, id)
				}
			})
			return value, err
		}
		m.id = &id
	}
}

// withWord sets the old Word of the mutation.
func withWord(node *Word) wordOption {
	return func(m *WordMutation) {
		m.oldValue = func(context.Context) (*Word, error) {
			return node, nil
		}
		m.id = &node.ID
	}
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m WordMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m WordMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, errors.New("ent: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// ID returns the ID value in the mutation. Note that the ID is only available
// if it was provided to the builder or after it was returned from the database.
func (m *WordMutation) ID() (id int, exists bool) {
	if m.id == nil {
		return
	}
	return *m.id, true
}

// IDs queries the database and returns the entity ids that match the mutation's predicate.
// That means, if the mutation is applied within a transaction with an isolation level such
// as sql.LevelSerializable, the returned ids match the ids of the rows that will be updated
// or updated by the mutation.
func (m *WordMutation) IDs(ctx context.Context) ([]int, error) {
	switch {
	case m.op.Is(OpUpdateOne | OpDeleteOne):
		id, exists := m.ID()
		if exists {
			return []int{id}, nil
		}
		fallthrough
	case m.op.Is(OpUpdate | OpDelete):
		return m.Client().Word.Query().Where(m.predicates...).IDs(ctx)
	default:
		return nil, fmt.Errorf("IDs is not allowed on %s operations", m.op)
	}
}

// SetDescription sets the "description" field.
func (m *WordMutation) SetDescription(s string) {
	m.description = &s
}

// Description returns the value of the "description" field in the mutation.
func (m *WordMutation) Description() (r string, exists bool) {
	v := m.description
	if v == nil {
		return
	}
	return *v, true
}

// OldDescription returns the old "description" field's value of the Word entity.
// If the Word object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *WordMutation) OldDescription(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldDescription is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldDescription requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldDescription: %w", err)
	}
	return oldValue.Description, nil
}

// ResetDescription resets all changes to the "description" field.
func (m *WordMutation) ResetDescription() {
	m.description = nil
}

// SetDescendantCount sets the "descendantCount" field.
func (m *WordMutation) SetDescendantCount(i int) {
	m.descendantCount = &i
	m.adddescendantCount = nil
}

// DescendantCount returns the value of the "descendantCount" field in the mutation.
func (m *WordMutation) DescendantCount() (r int, exists bool) {
	v := m.descendantCount
	if v == nil {
		return
	}
	return *v, true
}

// OldDescendantCount returns the old "descendantCount" field's value of the Word entity.
// If the Word object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *WordMutation) OldDescendantCount(ctx context.Context) (v int, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldDescendantCount is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldDescendantCount requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldDescendantCount: %w", err)
	}
	return oldValue.DescendantCount, nil
}

// AddDescendantCount adds i to the "descendantCount" field.
func (m *WordMutation) AddDescendantCount(i int) {
	if m.adddescendantCount != nil {
		*m.adddescendantCount += i
	} else {
		m.adddescendantCount = &i
	}
}

// AddedDescendantCount returns the value that was added to the "descendantCount" field in this mutation.
func (m *WordMutation) AddedDescendantCount() (r int, exists bool) {
	v := m.adddescendantCount
	if v == nil {
		return
	}
	return *v, true
}

// ResetDescendantCount resets all changes to the "descendantCount" field.
func (m *WordMutation) ResetDescendantCount() {
	m.descendantCount = nil
	m.adddescendantCount = nil
}

// SetCreatorID sets the "creator" edge to the User entity by id.
func (m *WordMutation) SetCreatorID(id int) {
	m.creator = &id
}

// ClearCreator clears the "creator" edge to the User entity.
func (m *WordMutation) ClearCreator() {
	m.clearedcreator = true
}

// CreatorCleared reports if the "creator" edge to the User entity was cleared.
func (m *WordMutation) CreatorCleared() bool {
	return m.clearedcreator
}

// CreatorID returns the "creator" edge ID in the mutation.
func (m *WordMutation) CreatorID() (id int, exists bool) {
	if m.creator != nil {
		return *m.creator, true
	}
	return
}

// CreatorIDs returns the "creator" edge IDs in the mutation.
// Note that IDs always returns len(IDs) <= 1 for unique edges, and you should use
// CreatorID instead. It exists only for internal usage by the builders.
func (m *WordMutation) CreatorIDs() (ids []int) {
	if id := m.creator; id != nil {
		ids = append(ids, *id)
	}
	return
}

// ResetCreator resets all changes to the "creator" edge.
func (m *WordMutation) ResetCreator() {
	m.creator = nil
	m.clearedcreator = false
}

// SetGroupID sets the "group" edge to the Group entity by id.
func (m *WordMutation) SetGroupID(id int) {
	m.group = &id
}

// ClearGroup clears the "group" edge to the Group entity.
func (m *WordMutation) ClearGroup() {
	m.clearedgroup = true
}

// GroupCleared reports if the "group" edge to the Group entity was cleared.
func (m *WordMutation) GroupCleared() bool {
	return m.clearedgroup
}

// GroupID returns the "group" edge ID in the mutation.
func (m *WordMutation) GroupID() (id int, exists bool) {
	if m.group != nil {
		return *m.group, true
	}
	return
}

// GroupIDs returns the "group" edge IDs in the mutation.
// Note that IDs always returns len(IDs) <= 1 for unique edges, and you should use
// GroupID instead. It exists only for internal usage by the builders.
func (m *WordMutation) GroupIDs() (ids []int) {
	if id := m.group; id != nil {
		ids = append(ids, *id)
	}
	return
}

// ResetGroup resets all changes to the "group" edge.
func (m *WordMutation) ResetGroup() {
	m.group = nil
	m.clearedgroup = false
}

// AddDefinitionIDs adds the "definitions" edge to the Definition entity by ids.
func (m *WordMutation) AddDefinitionIDs(ids ...int) {
	if m.definitions == nil {
		m.definitions = make(map[int]struct{})
	}
	for i := range ids {
		m.definitions[ids[i]] = struct{}{}
	}
}

// ClearDefinitions clears the "definitions" edge to the Definition entity.
func (m *WordMutation) ClearDefinitions() {
	m.cleareddefinitions = true
}

// DefinitionsCleared reports if the "definitions" edge to the Definition entity was cleared.
func (m *WordMutation) DefinitionsCleared() bool {
	return m.cleareddefinitions
}

// RemoveDefinitionIDs removes the "definitions" edge to the Definition entity by IDs.
func (m *WordMutation) RemoveDefinitionIDs(ids ...int) {
	if m.removeddefinitions == nil {
		m.removeddefinitions = make(map[int]struct{})
	}
	for i := range ids {
		delete(m.definitions, ids[i])
		m.removeddefinitions[ids[i]] = struct{}{}
	}
}

// RemovedDefinitions returns the removed IDs of the "definitions" edge to the Definition entity.
func (m *WordMutation) RemovedDefinitionsIDs() (ids []int) {
	for id := range m.removeddefinitions {
		ids = append(ids, id)
	}
	return
}

// DefinitionsIDs returns the "definitions" edge IDs in the mutation.
func (m *WordMutation) DefinitionsIDs() (ids []int) {
	for id := range m.definitions {
		ids = append(ids, id)
	}
	return
}

// ResetDefinitions resets all changes to the "definitions" edge.
func (m *WordMutation) ResetDefinitions() {
	m.definitions = nil
	m.cleareddefinitions = false
	m.removeddefinitions = nil
}

// AddDescendantIDs adds the "descendants" edge to the Word entity by ids.
func (m *WordMutation) AddDescendantIDs(ids ...int) {
	if m.descendants == nil {
		m.descendants = make(map[int]struct{})
	}
	for i := range ids {
		m.descendants[ids[i]] = struct{}{}
	}
}

// ClearDescendants clears the "descendants" edge to the Word entity.
func (m *WordMutation) ClearDescendants() {
	m.cleareddescendants = true
}

// DescendantsCleared reports if the "descendants" edge to the Word entity was cleared.
func (m *WordMutation) DescendantsCleared() bool {
	return m.cleareddescendants
}

// RemoveDescendantIDs removes the "descendants" edge to the Word entity by IDs.
func (m *WordMutation) RemoveDescendantIDs(ids ...int) {
	if m.removeddescendants == nil {
		m.removeddescendants = make(map[int]struct{})
	}
	for i := range ids {
		delete(m.descendants, ids[i])
		m.removeddescendants[ids[i]] = struct{}{}
	}
}

// RemovedDescendants returns the removed IDs of the "descendants" edge to the Word entity.
func (m *WordMutation) RemovedDescendantsIDs() (ids []int) {
	for id := range m.removeddescendants {
		ids = append(ids, id)
	}
	return
}

// DescendantsIDs returns the "descendants" edge IDs in the mutation.
func (m *WordMutation) DescendantsIDs() (ids []int) {
	for id := range m.descendants {
		ids = append(ids, id)
	}
	return
}

// ResetDescendants resets all changes to the "descendants" edge.
func (m *WordMutation) ResetDescendants() {
	m.descendants = nil
	m.cleareddescendants = false
	m.removeddescendants = nil
}

// AddParentIDs adds the "parents" edge to the Word entity by ids.
func (m *WordMutation) AddParentIDs(ids ...int) {
	if m.parents == nil {
		m.parents = make(map[int]struct{})
	}
	for i := range ids {
		m.parents[ids[i]] = struct{}{}
	}
}

// ClearParents clears the "parents" edge to the Word entity.
func (m *WordMutation) ClearParents() {
	m.clearedparents = true
}

// ParentsCleared reports if the "parents" edge to the Word entity was cleared.
func (m *WordMutation) ParentsCleared() bool {
	return m.clearedparents
}

// RemoveParentIDs removes the "parents" edge to the Word entity by IDs.
func (m *WordMutation) RemoveParentIDs(ids ...int) {
	if m.removedparents == nil {
		m.removedparents = make(map[int]struct{})
	}
	for i := range ids {
		delete(m.parents, ids[i])
		m.removedparents[ids[i]] = struct{}{}
	}
}

// RemovedParents returns the removed IDs of the "parents" edge to the Word entity.
func (m *WordMutation) RemovedParentsIDs() (ids []int) {
	for id := range m.removedparents {
		ids = append(ids, id)
	}
	return
}

// ParentsIDs returns the "parents" edge IDs in the mutation.
func (m *WordMutation) ParentsIDs() (ids []int) {
	for id := range m.parents {
		ids = append(ids, id)
	}
	return
}

// ResetParents resets all changes to the "parents" edge.
func (m *WordMutation) ResetParents() {
	m.parents = nil
	m.clearedparents = false
	m.removedparents = nil
}

// Where appends a list predicates to the WordMutation builder.
func (m *WordMutation) Where(ps ...predicate.Word) {
	m.predicates = append(m.predicates, ps...)
}

// WhereP appends storage-level predicates to the WordMutation builder. Using this method,
// users can use type-assertion to append predicates that do not depend on any generated package.
func (m *WordMutation) WhereP(ps ...func(*sql.Selector)) {
	p := make([]predicate.Word, len(ps))
	for i := range ps {
		p[i] = ps[i]
	}
	m.Where(p...)
}

// Op returns the operation name.
func (m *WordMutation) Op() Op {
	return m.op
}

// SetOp allows setting the mutation operation.
func (m *WordMutation) SetOp(op Op) {
	m.op = op
}

// Type returns the node type of this mutation (Word).
func (m *WordMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during this mutation. Note that in
// order to get all numeric fields that were incremented/decremented, call
// AddedFields().
func (m *WordMutation) Fields() []string {
	fields := make([]string, 0, 2)
	if m.description != nil {
		fields = append(fields, word.FieldDescription)
	}
	if m.descendantCount != nil {
		fields = append(fields, word.FieldDescendantCount)
	}
	return fields
}

// Field returns the value of a field with the given name. The second boolean
// return value indicates that this field was not set, or was not defined in the
// schema.
func (m *WordMutation) Field(name string) (ent.Value, bool) {
	switch name {
	case word.FieldDescription:
		return m.Description()
	case word.FieldDescendantCount:
		return m.DescendantCount()
	}
	return nil, false
}

// OldField returns the old value of the field from the database. An error is
// returned if the mutation operation is not UpdateOne, or the query to the
// database failed.
func (m *WordMutation) OldField(ctx context.Context, name string) (ent.Value, error) {
	switch name {
	case word.FieldDescription:
		return m.OldDescription(ctx)
	case word.FieldDescendantCount:
		return m.OldDescendantCount(ctx)
	}
	return nil, fmt.Errorf("unknown Word field %s", name)
}

// SetField sets the value of a field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *WordMutation) SetField(name string, value ent.Value) error {
	switch name {
	case word.FieldDescription:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetDescription(v)
		return nil
	case word.FieldDescendantCount:
		v, ok := value.(int)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetDescendantCount(v)
		return nil
	}
	return fmt.Errorf("unknown Word field %s", name)
}

// AddedFields returns all numeric fields that were incremented/decremented during
// this mutation.
func (m *WordMutation) AddedFields() []string {
	var fields []string
	if m.adddescendantCount != nil {
		fields = append(fields, word.FieldDescendantCount)
	}
	return fields
}

// AddedField returns the numeric value that was incremented/decremented on a field
// with the given name. The second boolean return value indicates that this field
// was not set, or was not defined in the schema.
func (m *WordMutation) AddedField(name string) (ent.Value, bool) {
	switch name {
	case word.FieldDescendantCount:
		return m.AddedDescendantCount()
	}
	return nil, false
}

// AddField adds the value to the field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *WordMutation) AddField(name string, value ent.Value) error {
	switch name {
	case word.FieldDescendantCount:
		v, ok := value.(int)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddDescendantCount(v)
		return nil
	}
	return fmt.Errorf("unknown Word numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared during this
// mutation.
func (m *WordMutation) ClearedFields() []string {
	return nil
}

// FieldCleared returns a boolean indicating if a field with the given name was
// cleared in this mutation.
func (m *WordMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value of the field with the given name. It returns an
// error if the field is not defined in the schema.
func (m *WordMutation) ClearField(name string) error {
	return fmt.Errorf("unknown Word nullable field %s", name)
}

// ResetField resets all changes in the mutation for the field with the given name.
// It returns an error if the field is not defined in the schema.
func (m *WordMutation) ResetField(name string) error {
	switch name {
	case word.FieldDescription:
		m.ResetDescription()
		return nil
	case word.FieldDescendantCount:
		m.ResetDescendantCount()
		return nil
	}
	return fmt.Errorf("unknown Word field %s", name)
}

// AddedEdges returns all edge names that were set/added in this mutation.
func (m *WordMutation) AddedEdges() []string {
	edges := make([]string, 0, 5)
	if m.creator != nil {
		edges = append(edges, word.EdgeCreator)
	}
	if m.group != nil {
		edges = append(edges, word.EdgeGroup)
	}
	if m.definitions != nil {
		edges = append(edges, word.EdgeDefinitions)
	}
	if m.descendants != nil {
		edges = append(edges, word.EdgeDescendants)
	}
	if m.parents != nil {
		edges = append(edges, word.EdgeParents)
	}
	return edges
}

// AddedIDs returns all IDs (to other nodes) that were added for the given edge
// name in this mutation.
func (m *WordMutation) AddedIDs(name string) []ent.Value {
	switch name {
	case word.EdgeCreator:
		if id := m.creator; id != nil {
			return []ent.Value{*id}
		}
	case word.EdgeGroup:
		if id := m.group; id != nil {
			return []ent.Value{*id}
		}
	case word.EdgeDefinitions:
		ids := make([]ent.Value, 0, len(m.definitions))
		for id := range m.definitions {
			ids = append(ids, id)
		}
		return ids
	case word.EdgeDescendants:
		ids := make([]ent.Value, 0, len(m.descendants))
		for id := range m.descendants {
			ids = append(ids, id)
		}
		return ids
	case word.EdgeParents:
		ids := make([]ent.Value, 0, len(m.parents))
		for id := range m.parents {
			ids = append(ids, id)
		}
		return ids
	}
	return nil
}

// RemovedEdges returns all edge names that were removed in this mutation.
func (m *WordMutation) RemovedEdges() []string {
	edges := make([]string, 0, 5)
	if m.removeddefinitions != nil {
		edges = append(edges, word.EdgeDefinitions)
	}
	if m.removeddescendants != nil {
		edges = append(edges, word.EdgeDescendants)
	}
	if m.removedparents != nil {
		edges = append(edges, word.EdgeParents)
	}
	return edges
}

// RemovedIDs returns all IDs (to other nodes) that were removed for the edge with
// the given name in this mutation.
func (m *WordMutation) RemovedIDs(name string) []ent.Value {
	switch name {
	case word.EdgeDefinitions:
		ids := make([]ent.Value, 0, len(m.removeddefinitions))
		for id := range m.removeddefinitions {
			ids = append(ids, id)
		}
		return ids
	case word.EdgeDescendants:
		ids := make([]ent.Value, 0, len(m.removeddescendants))
		for id := range m.removeddescendants {
			ids = append(ids, id)
		}
		return ids
	case word.EdgeParents:
		ids := make([]ent.Value, 0, len(m.removedparents))
		for id := range m.removedparents {
			ids = append(ids, id)
		}
		return ids
	}
	return nil
}

// ClearedEdges returns all edge names that were cleared in this mutation.
func (m *WordMutation) ClearedEdges() []string {
	edges := make([]string, 0, 5)
	if m.clearedcreator {
		edges = append(edges, word.EdgeCreator)
	}
	if m.clearedgroup {
		edges = append(edges, word.EdgeGroup)
	}
	if m.cleareddefinitions {
		edges = append(edges, word.EdgeDefinitions)
	}
	if m.cleareddescendants {
		edges = append(edges, word.EdgeDescendants)
	}
	if m.clearedparents {
		edges = append(edges, word.EdgeParents)
	}
	return edges
}

// EdgeCleared returns a boolean which indicates if the edge with the given name
// was cleared in this mutation.
func (m *WordMutation) EdgeCleared(name string) bool {
	switch name {
	case word.EdgeCreator:
		return m.clearedcreator
	case word.EdgeGroup:
		return m.clearedgroup
	case word.EdgeDefinitions:
		return m.cleareddefinitions
	case word.EdgeDescendants:
		return m.cleareddescendants
	case word.EdgeParents:
		return m.clearedparents
	}
	return false
}

// ClearEdge clears the value of the edge with the given name. It returns an error
// if that edge is not defined in the schema.
func (m *WordMutation) ClearEdge(name string) error {
	switch name {
	case word.EdgeCreator:
		m.ClearCreator()
		return nil
	case word.EdgeGroup:
		m.ClearGroup()
		return nil
	}
	return fmt.Errorf("unknown Word unique edge %s", name)
}

// ResetEdge resets all changes to the edge with the given name in this mutation.
// It returns an error if the edge is not defined in the schema.
func (m *WordMutation) ResetEdge(name string) error {
	switch name {
	case word.EdgeCreator:
		m.ResetCreator()
		return nil
	case word.EdgeGroup:
		m.ResetGroup()
		return nil
	case word.EdgeDefinitions:
		m.ResetDefinitions()
		return nil
	case word.EdgeDescendants:
		m.ResetDescendants()
		return nil
	case word.EdgeParents:
		m.ResetParents()
		return nil
	}
	return fmt.Errorf("unknown Word edge %s", name)
}
