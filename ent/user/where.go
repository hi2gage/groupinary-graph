// Code generated by ent, DO NOT EDIT.

package user

import (
	"shrektionary_api/ent/predicate"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
)

// ID filters vertices based on their ID field.
func ID(id int) predicate.User {
	return predicate.User(sql.FieldEQ(FieldID, id))
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id int) predicate.User {
	return predicate.User(sql.FieldEQ(FieldID, id))
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id int) predicate.User {
	return predicate.User(sql.FieldNEQ(FieldID, id))
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...int) predicate.User {
	return predicate.User(sql.FieldIn(FieldID, ids...))
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...int) predicate.User {
	return predicate.User(sql.FieldNotIn(FieldID, ids...))
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id int) predicate.User {
	return predicate.User(sql.FieldGT(FieldID, id))
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id int) predicate.User {
	return predicate.User(sql.FieldGTE(FieldID, id))
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id int) predicate.User {
	return predicate.User(sql.FieldLT(FieldID, id))
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id int) predicate.User {
	return predicate.User(sql.FieldLTE(FieldID, id))
}

// AuthID applies equality check predicate on the "authID" field. It's identical to AuthIDEQ.
func AuthID(v string) predicate.User {
	return predicate.User(sql.FieldEQ(FieldAuthID, v))
}

// AuthIDEQ applies the EQ predicate on the "authID" field.
func AuthIDEQ(v string) predicate.User {
	return predicate.User(sql.FieldEQ(FieldAuthID, v))
}

// AuthIDNEQ applies the NEQ predicate on the "authID" field.
func AuthIDNEQ(v string) predicate.User {
	return predicate.User(sql.FieldNEQ(FieldAuthID, v))
}

// AuthIDIn applies the In predicate on the "authID" field.
func AuthIDIn(vs ...string) predicate.User {
	return predicate.User(sql.FieldIn(FieldAuthID, vs...))
}

// AuthIDNotIn applies the NotIn predicate on the "authID" field.
func AuthIDNotIn(vs ...string) predicate.User {
	return predicate.User(sql.FieldNotIn(FieldAuthID, vs...))
}

// AuthIDGT applies the GT predicate on the "authID" field.
func AuthIDGT(v string) predicate.User {
	return predicate.User(sql.FieldGT(FieldAuthID, v))
}

// AuthIDGTE applies the GTE predicate on the "authID" field.
func AuthIDGTE(v string) predicate.User {
	return predicate.User(sql.FieldGTE(FieldAuthID, v))
}

// AuthIDLT applies the LT predicate on the "authID" field.
func AuthIDLT(v string) predicate.User {
	return predicate.User(sql.FieldLT(FieldAuthID, v))
}

// AuthIDLTE applies the LTE predicate on the "authID" field.
func AuthIDLTE(v string) predicate.User {
	return predicate.User(sql.FieldLTE(FieldAuthID, v))
}

// AuthIDContains applies the Contains predicate on the "authID" field.
func AuthIDContains(v string) predicate.User {
	return predicate.User(sql.FieldContains(FieldAuthID, v))
}

// AuthIDHasPrefix applies the HasPrefix predicate on the "authID" field.
func AuthIDHasPrefix(v string) predicate.User {
	return predicate.User(sql.FieldHasPrefix(FieldAuthID, v))
}

// AuthIDHasSuffix applies the HasSuffix predicate on the "authID" field.
func AuthIDHasSuffix(v string) predicate.User {
	return predicate.User(sql.FieldHasSuffix(FieldAuthID, v))
}

// AuthIDEqualFold applies the EqualFold predicate on the "authID" field.
func AuthIDEqualFold(v string) predicate.User {
	return predicate.User(sql.FieldEqualFold(FieldAuthID, v))
}

// AuthIDContainsFold applies the ContainsFold predicate on the "authID" field.
func AuthIDContainsFold(v string) predicate.User {
	return predicate.User(sql.FieldContainsFold(FieldAuthID, v))
}

// HasGroups applies the HasEdge predicate on the "groups" edge.
func HasGroups() predicate.User {
	return predicate.User(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.M2M, false, GroupsTable, GroupsPrimaryKey...),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasGroupsWith applies the HasEdge predicate on the "groups" edge with a given conditions (other predicates).
func HasGroupsWith(preds ...predicate.Group) predicate.User {
	return predicate.User(func(s *sql.Selector) {
		step := newGroupsStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasDefinitions applies the HasEdge predicate on the "definitions" edge.
func HasDefinitions() predicate.User {
	return predicate.User(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, DefinitionsTable, DefinitionsColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasDefinitionsWith applies the HasEdge predicate on the "definitions" edge with a given conditions (other predicates).
func HasDefinitionsWith(preds ...predicate.Definition) predicate.User {
	return predicate.User(func(s *sql.Selector) {
		step := newDefinitionsStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasWords applies the HasEdge predicate on the "words" edge.
func HasWords() predicate.User {
	return predicate.User(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, WordsTable, WordsColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasWordsWith applies the HasEdge predicate on the "words" edge with a given conditions (other predicates).
func HasWordsWith(preds ...predicate.Word) predicate.User {
	return predicate.User(func(s *sql.Selector) {
		step := newWordsStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.User) predicate.User {
	return predicate.User(func(s *sql.Selector) {
		s1 := s.Clone().SetP(nil)
		for _, p := range predicates {
			p(s1)
		}
		s.Where(s1.P())
	})
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.User) predicate.User {
	return predicate.User(func(s *sql.Selector) {
		s1 := s.Clone().SetP(nil)
		for i, p := range predicates {
			if i > 0 {
				s1.Or()
			}
			p(s1)
		}
		s.Where(s1.P())
	})
}

// Not applies the not operator on the given predicate.
func Not(p predicate.User) predicate.User {
	return predicate.User(func(s *sql.Selector) {
		p(s.Not())
	})
}
