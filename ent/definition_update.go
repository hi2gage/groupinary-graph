// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"shrektionary_api/ent/definition"
	"shrektionary_api/ent/predicate"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// DefinitionUpdate is the builder for updating Definition entities.
type DefinitionUpdate struct {
	config
	hooks    []Hook
	mutation *DefinitionMutation
}

// Where appends a list predicates to the DefinitionUpdate builder.
func (du *DefinitionUpdate) Where(ps ...predicate.Definition) *DefinitionUpdate {
	du.mutation.Where(ps...)
	return du
}

// SetUpdateTime sets the "update_time" field.
func (du *DefinitionUpdate) SetUpdateTime(t time.Time) *DefinitionUpdate {
	du.mutation.SetUpdateTime(t)
	return du
}

// SetDescription sets the "description" field.
func (du *DefinitionUpdate) SetDescription(s string) *DefinitionUpdate {
	du.mutation.SetDescription(s)
	return du
}

// Mutation returns the DefinitionMutation object of the builder.
func (du *DefinitionUpdate) Mutation() *DefinitionMutation {
	return du.mutation
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (du *DefinitionUpdate) Save(ctx context.Context) (int, error) {
	du.defaults()
	return withHooks(ctx, du.sqlSave, du.mutation, du.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (du *DefinitionUpdate) SaveX(ctx context.Context) int {
	affected, err := du.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (du *DefinitionUpdate) Exec(ctx context.Context) error {
	_, err := du.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (du *DefinitionUpdate) ExecX(ctx context.Context) {
	if err := du.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (du *DefinitionUpdate) defaults() {
	if _, ok := du.mutation.UpdateTime(); !ok {
		v := definition.UpdateDefaultUpdateTime()
		du.mutation.SetUpdateTime(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (du *DefinitionUpdate) check() error {
	if v, ok := du.mutation.Description(); ok {
		if err := definition.DescriptionValidator(v); err != nil {
			return &ValidationError{Name: "description", err: fmt.Errorf(`ent: validator failed for field "Definition.description": %w`, err)}
		}
	}
	return nil
}

func (du *DefinitionUpdate) sqlSave(ctx context.Context) (n int, err error) {
	if err := du.check(); err != nil {
		return n, err
	}
	_spec := sqlgraph.NewUpdateSpec(definition.Table, definition.Columns, sqlgraph.NewFieldSpec(definition.FieldID, field.TypeInt))
	if ps := du.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := du.mutation.UpdateTime(); ok {
		_spec.SetField(definition.FieldUpdateTime, field.TypeTime, value)
	}
	if value, ok := du.mutation.Description(); ok {
		_spec.SetField(definition.FieldDescription, field.TypeString, value)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, du.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{definition.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	du.mutation.done = true
	return n, nil
}

// DefinitionUpdateOne is the builder for updating a single Definition entity.
type DefinitionUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *DefinitionMutation
}

// SetUpdateTime sets the "update_time" field.
func (duo *DefinitionUpdateOne) SetUpdateTime(t time.Time) *DefinitionUpdateOne {
	duo.mutation.SetUpdateTime(t)
	return duo
}

// SetDescription sets the "description" field.
func (duo *DefinitionUpdateOne) SetDescription(s string) *DefinitionUpdateOne {
	duo.mutation.SetDescription(s)
	return duo
}

// Mutation returns the DefinitionMutation object of the builder.
func (duo *DefinitionUpdateOne) Mutation() *DefinitionMutation {
	return duo.mutation
}

// Where appends a list predicates to the DefinitionUpdate builder.
func (duo *DefinitionUpdateOne) Where(ps ...predicate.Definition) *DefinitionUpdateOne {
	duo.mutation.Where(ps...)
	return duo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (duo *DefinitionUpdateOne) Select(field string, fields ...string) *DefinitionUpdateOne {
	duo.fields = append([]string{field}, fields...)
	return duo
}

// Save executes the query and returns the updated Definition entity.
func (duo *DefinitionUpdateOne) Save(ctx context.Context) (*Definition, error) {
	duo.defaults()
	return withHooks(ctx, duo.sqlSave, duo.mutation, duo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (duo *DefinitionUpdateOne) SaveX(ctx context.Context) *Definition {
	node, err := duo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (duo *DefinitionUpdateOne) Exec(ctx context.Context) error {
	_, err := duo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (duo *DefinitionUpdateOne) ExecX(ctx context.Context) {
	if err := duo.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (duo *DefinitionUpdateOne) defaults() {
	if _, ok := duo.mutation.UpdateTime(); !ok {
		v := definition.UpdateDefaultUpdateTime()
		duo.mutation.SetUpdateTime(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (duo *DefinitionUpdateOne) check() error {
	if v, ok := duo.mutation.Description(); ok {
		if err := definition.DescriptionValidator(v); err != nil {
			return &ValidationError{Name: "description", err: fmt.Errorf(`ent: validator failed for field "Definition.description": %w`, err)}
		}
	}
	return nil
}

func (duo *DefinitionUpdateOne) sqlSave(ctx context.Context) (_node *Definition, err error) {
	if err := duo.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(definition.Table, definition.Columns, sqlgraph.NewFieldSpec(definition.FieldID, field.TypeInt))
	id, ok := duo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "Definition.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := duo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, definition.FieldID)
		for _, f := range fields {
			if !definition.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != definition.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := duo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := duo.mutation.UpdateTime(); ok {
		_spec.SetField(definition.FieldUpdateTime, field.TypeTime, value)
	}
	if value, ok := duo.mutation.Description(); ok {
		_spec.SetField(definition.FieldDescription, field.TypeString, value)
	}
	_node = &Definition{config: duo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, duo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{definition.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	duo.mutation.done = true
	return _node, nil
}
