// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"shrektionary_api/ent/wordconnections"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// WordConnectionsCreate is the builder for creating a WordConnections entity.
type WordConnectionsCreate struct {
	config
	mutation *WordConnectionsMutation
	hooks    []Hook
}

// SetDescription sets the "description" field.
func (wcc *WordConnectionsCreate) SetDescription(s string) *WordConnectionsCreate {
	wcc.mutation.SetDescription(s)
	return wcc
}

// Mutation returns the WordConnectionsMutation object of the builder.
func (wcc *WordConnectionsCreate) Mutation() *WordConnectionsMutation {
	return wcc.mutation
}

// Save creates the WordConnections in the database.
func (wcc *WordConnectionsCreate) Save(ctx context.Context) (*WordConnections, error) {
	return withHooks(ctx, wcc.sqlSave, wcc.mutation, wcc.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (wcc *WordConnectionsCreate) SaveX(ctx context.Context) *WordConnections {
	v, err := wcc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (wcc *WordConnectionsCreate) Exec(ctx context.Context) error {
	_, err := wcc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (wcc *WordConnectionsCreate) ExecX(ctx context.Context) {
	if err := wcc.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (wcc *WordConnectionsCreate) check() error {
	if _, ok := wcc.mutation.Description(); !ok {
		return &ValidationError{Name: "description", err: errors.New(`ent: missing required field "WordConnections.description"`)}
	}
	if v, ok := wcc.mutation.Description(); ok {
		if err := wordconnections.DescriptionValidator(v); err != nil {
			return &ValidationError{Name: "description", err: fmt.Errorf(`ent: validator failed for field "WordConnections.description": %w`, err)}
		}
	}
	return nil
}

func (wcc *WordConnectionsCreate) sqlSave(ctx context.Context) (*WordConnections, error) {
	if err := wcc.check(); err != nil {
		return nil, err
	}
	_node, _spec := wcc.createSpec()
	if err := sqlgraph.CreateNode(ctx, wcc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	id := _spec.ID.Value.(int64)
	_node.ID = int(id)
	wcc.mutation.id = &_node.ID
	wcc.mutation.done = true
	return _node, nil
}

func (wcc *WordConnectionsCreate) createSpec() (*WordConnections, *sqlgraph.CreateSpec) {
	var (
		_node = &WordConnections{config: wcc.config}
		_spec = sqlgraph.NewCreateSpec(wordconnections.Table, sqlgraph.NewFieldSpec(wordconnections.FieldID, field.TypeInt))
	)
	if value, ok := wcc.mutation.Description(); ok {
		_spec.SetField(wordconnections.FieldDescription, field.TypeString, value)
		_node.Description = value
	}
	return _node, _spec
}

// WordConnectionsCreateBulk is the builder for creating many WordConnections entities in bulk.
type WordConnectionsCreateBulk struct {
	config
	builders []*WordConnectionsCreate
}

// Save creates the WordConnections entities in the database.
func (wccb *WordConnectionsCreateBulk) Save(ctx context.Context) ([]*WordConnections, error) {
	specs := make([]*sqlgraph.CreateSpec, len(wccb.builders))
	nodes := make([]*WordConnections, len(wccb.builders))
	mutators := make([]Mutator, len(wccb.builders))
	for i := range wccb.builders {
		func(i int, root context.Context) {
			builder := wccb.builders[i]
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*WordConnectionsMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, wccb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, wccb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				if specs[i].ID.Value != nil {
					id := specs[i].ID.Value.(int64)
					nodes[i].ID = int(id)
				}
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, wccb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (wccb *WordConnectionsCreateBulk) SaveX(ctx context.Context) []*WordConnections {
	v, err := wccb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (wccb *WordConnectionsCreateBulk) Exec(ctx context.Context) error {
	_, err := wccb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (wccb *WordConnectionsCreateBulk) ExecX(ctx context.Context) {
	if err := wccb.Exec(ctx); err != nil {
		panic(err)
	}
}
